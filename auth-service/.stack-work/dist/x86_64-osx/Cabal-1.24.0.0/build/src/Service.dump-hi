
==================== FINAL INTERFACE ====================
2016-12-05 20:06:13.812312 UTC

interface auth-service-0.1.0.0-AuA6V8MYMHu6qIHpXBhabJ:Service 8001
  interface hash: 0c6a333127af3c82ef1601b1e561da7f
  ABI hash: c444e377de237c95388585fe23024f5a
  export-list hash: 6eb93faf93516a00c0177b30593bd8b5
  orphan hash: d736d69f8d8563f7f5d4e8732cb02314
  flag hash: cb79fe25b2e43a87f3e6eff39d25ce76
  sig of: Nothing
  used TH splices: False
  where
exports:
  Service.allUsers
  Service.app
  Service.appApi
  Service.appToServer
  Service.convertApp
  Service.userServer
  Service.App{Service.App runApp}
module dependencies: AuthApi Models
package dependencies: aeson-0.11.2.1@aeson-0.11.2.1-5ZQWuTFmffALcfpzDCXoOz
                      aeson-compat-0.3.6@aeson-compat-0.3.6-5wE6V2cyaFcB5no9HXBKW5
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR
                      auto-update-0.1.4@auto-update-0.1.4-GAesfFmqoZzBz6e09kRyzb
                      base-4.9.0.0
                      base-compat-0.9.1@base-compat-0.9.1-tmPpmtbHbvIDjFWbkjGrR
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-In9M41tLtcS9QYt3QpGpNY
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-KWDLbdBYSBoALiMW0LHIz1
                      blaze-html-0.8.1.2@blaze-html-0.8.1.2-2kD96kJB6JEGow1dP8IL6C
                      blaze-markup-0.7.1.0@blaze-markup-0.7.1.0-5a5pBG0fO8kJX4ke3K7j3D
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      bytestring-conversion-0.3.1@bytestring-conversion-0.3.1-EvX949he2UAKBbGbE7IZfu
                      case-insensitive-1.2.0.7@case-insensitive-1.2.0.7-FlqweN7AuKj9EdU2arVEt4
                      conduit-1.2.8@conduit-1.2.8-5FcKXI45VDc6lGPbFuJAWM
                      conduit-extra-1.1.15@conduit-extra-1.1.15-53svZ1V22a02WgMiq2YICw
                      containers-0.5.7.1@containers-0.5.7.1
                      cryptonite-0.19@cryptonite-0.19-G9PYO4oOEqhDTta2u9rAaU
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.2.6.2@directory-1.2.6.2
                      dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv
                      double-conversion-2.0.1.0@double-conversion-2.0.1.0-GBJeLbJOvPcIufCPOIwofV
                      easy-file-0.2.1@easy-file-0.2.1-bAUkz2rC2kFhBbPjw2Of5
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      fast-logger-2.4.7@fast-logger-2.4.7-E7H6TuZQzia59KuB50vayl
                      file-embed-0.0.10@file-embed-0.0.10-IXfudWSq57y1Athysk5ifZ
                      filepath-1.4.1.0@filepath-1.4.1.0
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      http-api-data-0.2.4@http-api-data-0.2.4-3jwS7OrPl3l4oJfG3gRZ5C
                      http-date-0.0.6.1@http-date-0.0.6.1-150spKQYCuoIrltdbMmYGs
                      http-media-0.6.4@http-media-0.6.4-82jDVCpdN5H696EFF5l5I4
                      http-types-0.9.1@http-types-0.9.1-8WdUZL4twHzANJbxvb1Aoj
                      integer-gmp-1.0.0.1
                      lifted-base-0.2.3.8@lifted-base-0.2.3.8-KLkd0w1UJqu6nE8oVTTEBy
                      memory-0.13@memory-0.13-ABHR5331zHK9scHPRr7afU
                      mime-types-0.1.0.7@mime-types-0.1.0.7-AxQ64wFjikqCSdK5pSeZvh
                      mmorph-1.0.9@mmorph-1.0.9-DmSwQqk5nLj7roLAcydGz
                      monad-control-1.0.1.0@monad-control-1.0.1.0-HoNEBoNfniX3vjSfkI7WTT
                      monad-logger-0.3.20.1@monad-logger-0.3.20.1-Id6Qefl6M7BBA3QajigPhK
                      monad-loops-0.4.3@monad-loops-0.4.3-1xZFtRVMQPC4X8bjTBWqNi
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG
                      network-uri-2.6.1.0@network-uri-2.6.1.0-DDHh2FNiPirBRgkuU9DEt2
                      old-locale-1.0.0.7@old-locale-1.0.0.7-6glXNhHF891B41ZfuI8hU8
                      old-time-1.1.0.3@old-time-1.1.0.3-IcvdkJUsE9M8t3io8peAEp
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      path-pieces-0.2.1@path-pieces-0.2.1-EQ6YdjSujhVE8ECatsqK1q
                      persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD
                      persistent-postgresql-2.6@persistent-postgresql-2.6-GvBYHyPf2H6GQQdyjSi6nK
                      persistent-template-2.5.1.6@persistent-template-2.5.1.6-L1UJyeURwQyFqq8arz68gW
                      postgresql-libpq-0.9.2.0@postgresql-libpq-0.9.2.0-IWEdPrPraPeE94ud73Ope3
                      postgresql-simple-0.5.2.1@postgresql-simple-0.5.2.1-3INwbAr3KaOko5GoR6I2w
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      resource-pool-0.2.3.2@resource-pool-0.2.3.2-9vTgJsy3ECMB5KkdzRIRAh
                      resourcet-1.1.8.1@resourcet-1.1.8.1-1XWaZ7RmVde330DM5PRI3Z
                      scientific-0.3.4.9@scientific-0.3.4.9-6oTYuCcx6H5BsTGU7D2Gk3
                      servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc
                      servant-server-0.8.1@servant-server-0.8.1-2W4dYHeOEv33BK078P3wA
                      silently-1.2.5@silently-1.2.5-Ek776fxSdtm4h8aXqt6CNw
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      stm-chans-3.0.0.4@stm-chans-3.0.0.4-4lLWE8CZnvmDZJW5bKkus1
                      string-conversions-0.4@string-conversions-0.4-8T0UFmRDEly2gsNJzmHrNQ
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-1j5dGjxxtiTDuAsO86iSk0
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-25SoAegOdaF8rLEnnb5jPI
                      unix-2.7.2.0@unix-2.7.2.0
                      unix-compat-0.4.2.0@unix-compat-0.4.2.0-GNHotEMWE5dJ4oYFhgibIV
                      unix-time-0.3.7@unix-time-0.3.7-HcxGsrnTmTlC98pyanzoMW
                      unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-2T8mBCuEDlXDo8zed8Onw4
                      uuid-types-1.0.3@uuid-types-1.0.3-1qmdgBeDGlbCUibOmxVGqx
                      vault-0.3.0.6@vault-0.3.0.6-CA9Xj82tAPe9nD32xVMgDG
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
                      wai-3.2.1.1@wai-3.2.1.1-f77bMYZGLQBAD3XJrvGiW
                      wai-app-static-3.1.6.1@wai-app-static-3.1.6.1-6csRgbgolyoCCOLw42RlBs
                      word8-0.1.2@word8-0.1.2-2E1SgvvAV2fK8vZPDHbRan
                      zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV
orphans: aeson-0.11.2.1@aeson-0.11.2.1-5ZQWuTFmffALcfpzDCXoOz:Data.Aeson.Types.Generic
         aeson-0.11.2.1@aeson-0.11.2.1-5ZQWuTFmffALcfpzDCXoOz:Data.Aeson.Types.Instances
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.Text.Internal
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket
         persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Sql.Orphan.PersistStore
         persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Sql.Orphan.PersistUnique
         persistent-template-2.5.1.6@persistent-template-2.5.1.6-L1UJyeURwQyFqq8arz68gW:Database.Persist.TH
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         unix-time-0.3.7@unix-time-0.3.7-HcxGsrnTmTlC98pyanzoMW:Data.UnixTime.Diff
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.Internal.Types
                         auth-service-0.1.0.0-AuA6V8MYMHu6qIHpXBhabJ:Models
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv:Data.DList
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         monad-control-1.0.1.0@monad-control-1.0.1.0-HoNEBoNfniX3vjSfkI7WTT:Control.Monad.Trans.Control
                         monad-logger-0.3.20.1@monad-logger-0.3.20.1-Id6Qefl6M7BBA3QajigPhK:Control.Monad.Logger
                         network-uri-2.6.1.0@network-uri-2.6.1.0-DDHh2FNiPirBRgkuU9DEt2:Network.URI
                         persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Class.PersistConfig
                         persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Sql.Orphan.PersistStore
                         persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Sql.Types.Internal
                         persistent-postgresql-2.6@persistent-postgresql-2.6-GvBYHyPf2H6GQQdyjSi6nK:Database.Persist.Postgresql
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         resourcet-1.1.8.1@resourcet-1.1.8.1-1XWaZ7RmVde330DM5PRI3Z:Control.Monad.Trans.Resource.Internal
                         servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc:Servant.API.ContentTypes
                         servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc:Servant.API.Verbs
                         servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc:Servant.Utils.Links
                         servant-server-0.8.1@servant-server-0.8.1-2W4dYHeOEv33BK078P3wA:Servant.Server.Internal
                         servant-server-0.8.1@servant-server-0.8.1-2W4dYHeOEv33BK078P3wA:Servant.Server.Internal.BasicAuth
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-1qmdgBeDGlbCUibOmxVGqx:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-1qmdgBeDGlbCUibOmxVGqx:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV:Codec.Compression.Zlib.Stream
import  -/  AuthApi 692c2efb002c5887908640ffdbe67044
  exports: 2e76f9dda790adc5649dfdcfda8b51b0
  AuthServiceApi 66ff40552300453c186b4baaf3095b6f
import  -/  Models beeae1e1c4c615bdc706a5d52c4dd450
  exports: 31577eb3b6cc4eaa67d38b87570b966a
  User ed613bc560852f77f142d4e786a4167d
  dbAction 3bda264f39ec2b91c0819eff97748ff8
import  -/  base-4.9.0.0:Control.Monad.IO.Class d702028d883e700bd7066b031147030d
import  -/  base-4.9.0.0:Data.Proxy aa86c72628cf3b1ceb0816ca84687d80
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Error.Class f139fe3464686c34428880c6a5173636
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Except 99ba8f4995df0e7f2f512551a0ca666a
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader 859b39f57eb3bed457106c30aac21473
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader.Class a2c7beb266585be238cfe9f5989c52b7
import  -/  persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Class.PersistEntity 16dc9aa41de02addc67315556e1e5675
import  -/  persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Class.PersistQuery 898ff247336cf9e932a4a05f18e08420
import  -/  persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Sql.Types 28ab73798fb587e82ac34b8fd4fe757c
import  -/  persistent-postgresql-2.6@persistent-postgresql-2.6-GvBYHyPf2H6GQQdyjSi6nK:Database.Persist.Postgresql be3582dc9599bd8f4ee48c6f9709331d
import  -/  servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc:Servant.Utils.Enter 7de8c2005e1a9cd734a0b0a1a905d073
import  -/  servant-server-0.8.1@servant-server-0.8.1-2W4dYHeOEv33BK078P3wA:Servant 4e8fd52b06af1cb338d7389eb77ee11b
import  -/  servant-server-0.8.1@servant-server-0.8.1-2W4dYHeOEv33BK078P3wA:Servant.Server bea9e51d6973e4d625d4dc2c8aac41e8
import  -/  servant-server-0.8.1@servant-server-0.8.1-2W4dYHeOEv33BK078P3wA:Servant.Server.Internal 9c3368d63aa676e11df8e9753eae51ff
import  -/  servant-server-0.8.1@servant-server-0.8.1-2W4dYHeOEv33BK078P3wA:Servant.Server.Internal.ServantErr 9e0432efe4e8999c1ff1fb94acde3354
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Except 71b1d86204f6908788cb5223e3c73193
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader e4096b104cf1a0df8752e81669ef6a24
import  -/  wai-3.2.1.1@wai-3.2.1.1-f77bMYZGLQBAD3XJrvGiW:Network.Wai d1b73469fdcbc6b9af0b9cdf32c02363
db9e14d88bb44fb9249a8b031e380cbd
  $fApplicativeApp :: GHC.Base.Applicative Service.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Service.App
                  Service.$fFunctorApp
                  Service.$fApplicativeApp_$cpure
                  Service.$fApplicativeApp_$c<*>
                  Service.$fApplicativeApp_$c*>
                  Service.$fApplicativeApp_$c<* -}
ff6e936e6af660811cd39e14cfbcf6fc
  $fApplicativeApp1 ::
    Control.Monad.Trans.Reader.ReaderT
      (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
      (Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO a
  {- Arity: 3, Strictness: <L,C(C1(U(U,1*U)))><L,1*C1(U)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                             (Control.Monad.Trans.Except.ExceptT
                                Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                             a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                              (Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                              b)
                   (eta2 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend) ->
                 Control.Monad.Trans.Except.$w$c<*>
                   @ GHC.Types.IO
                   @ Servant.Server.Internal.ServantErr.ServantErr
                   GHC.Base.$fMonadIO
                   @ b
                   @ a
                   (\ (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (eta
                            `cast`
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                               <Control.Monad.Trans.Except.ExceptT
                                  Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                               <a>_N)
                            eta2)
                           `cast`
                         (Trans
                              (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Servant.Server.Internal.ServantErr.ServantErr>_N
                                   <GHC.Types.IO>_R
                                   <a>_N)
                              (GHC.Types.N:IO[0]
                                   <Data.Either.Either
                                      Servant.Server.Internal.ServantErr.ServantErr a>_R))
                           eta3 of ds { (#,#) ipv ipv1 ->
                    (# ipv,
                       case ipv1 of wild {
                         Data.Either.Left x
                         -> Data.Either.Left
                              @ Servant.Server.Internal.ServantErr.ServantErr
                              @ (b -> a)
                              x
                         Data.Either.Right y
                         -> Data.Either.Right
                              @ Servant.Server.Internal.ServantErr.ServantErr
                              @ (b -> a)
                              (\ (ds1 :: b) -> y) } #) })
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Servant.Server.Internal.ServantErr.ServantErr (b -> a)>_R))
                        (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <Servant.Server.Internal.ServantErr.ServantErr>_N
                                  <GHC.Types.IO>_R
                                  <b -> a>_N)))
                   (eta1
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N
                         <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                         <Control.Monad.Trans.Except.ExceptT
                            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                         <b>_N)
                      eta2)) -}
db6bdd2d19b6109a709641512f60472e
  $fApplicativeApp2 ::
    Control.Monad.Trans.Reader.ReaderT
      (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
      (Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b
  {- Arity: 3, Strictness: <L,C(C1(U(U,1*U)))><L,1*C1(U)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                             (Control.Monad.Trans.Except.ExceptT
                                Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                             a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                              (Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                              b)
                   (eta2 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend) ->
                 Control.Monad.Trans.Except.$w$c<*>
                   @ GHC.Types.IO
                   @ Servant.Server.Internal.ServantErr.ServantErr
                   GHC.Base.$fMonadIO
                   @ b
                   @ b
                   (\ (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (eta
                            `cast`
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                               <Control.Monad.Trans.Except.ExceptT
                                  Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                               <a>_N)
                            eta2)
                           `cast`
                         (Trans
                              (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Servant.Server.Internal.ServantErr.ServantErr>_N
                                   <GHC.Types.IO>_R
                                   <a>_N)
                              (GHC.Types.N:IO[0]
                                   <Data.Either.Either
                                      Servant.Server.Internal.ServantErr.ServantErr a>_R))
                           eta3 of ds { (#,#) ipv ipv1 ->
                    (# ipv,
                       case ipv1 of wild {
                         Data.Either.Left x
                         -> Data.Either.Left
                              @ Servant.Server.Internal.ServantErr.ServantErr
                              @ (b -> b)
                              x
                         Data.Either.Right y -> Service.$fApplicativeApp3 @ b } #) })
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Servant.Server.Internal.ServantErr.ServantErr (b -> b)>_R))
                        (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <Servant.Server.Internal.ServantErr.ServantErr>_N
                                  <GHC.Types.IO>_R
                                  <b -> b>_N)))
                   (eta1
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N
                         <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                         <Control.Monad.Trans.Except.ExceptT
                            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                         <b>_N)
                      eta2)) -}
39afcfe07488784eadb416dd9de7614b
  $fApplicativeApp3 ::
    Data.Either.Either
      Servant.Server.Internal.ServantErr.ServantErr (b -> b)
  {- HasNoCafRefs,
     Unfolding: (\ @ b ->
                 Data.Either.Right
                   @ Servant.Server.Internal.ServantErr.ServantErr
                   @ (b -> b)
                   (Service.$fApplicativeApp4 @ b)) -}
1b03519e6e8f2c51a8a9b746308ccda0
  $fApplicativeApp4 :: b -> b
  {- Arity: 1, HasNoCafRefs, Unfolding: (\ @ b (eta :: b) -> eta) -}
a19222e2cdfe4fdb775f4697dcba3f0e
  $fApplicativeApp5 ::
    a
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: a)
                   (eta1 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta2,
                    Data.Either.Right
                      @ Servant.Server.Internal.ServantErr.ServantErr
                      @ a
                      eta #)) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fApplicativeApp_$c*> ::
    Service.App a -> Service.App b -> Service.App b
  {- Arity: 3, Strictness: <L,C(C1(U(U,1*U)))><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fApplicativeApp2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Service.N:App[0]) <a>_N
                 ->_R Sym (Service.N:App[0]) <b>_N
                 ->_R Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Data.Pool.Pool
                                       Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                    <Control.Monad.Trans.Except.ExceptT
                                       Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                    <b>_N))
                          (Sym (Service.N:App[0]) <b>_N)) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fApplicativeApp_$c<* ::
    Service.App a -> Service.App b -> Service.App a
  {- Arity: 3, Strictness: <L,C(C1(U(U,1*U)))><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fApplicativeApp1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Service.N:App[0]) <a>_N
                 ->_R Sym (Service.N:App[0]) <b>_N
                 ->_R Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Data.Pool.Pool
                                       Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                    <Control.Monad.Trans.Except.ExceptT
                                       Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                    <a>_N))
                          (Sym (Service.N:App[0]) <a>_N)) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fApplicativeApp_$c<*> ::
    Service.App (a -> b) -> Service.App a -> Service.App b
  {- Arity: 3, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                (Service.$fApplicativeApp_$s$fApplicativeReaderT_$c<*>
                   @ (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Service.N:App[0]) <a -> b>_N
                 ->_R Sym (Service.N:App[0]) <a>_N
                 ->_R Sym (Service.N:App[0]) <b>_N) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fApplicativeApp_$cpure :: a -> Service.App a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fApplicativeApp5
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R
                 ->_R Trans
                          (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                                              <GHC.Types.IO>_R
                                              <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Data.Pool.Pool
                                            Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Service.N:App[0]) <a>_N))) -}
7d5441d7d3fb10c0f26470d99aacfc4d
  $fApplicativeApp_$dFunctor :: GHC.Base.Functor GHC.Types.IO
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Base.$fFunctorIO -}
e6ba745aeee285c4aeaad3465c6119e5
  $fApplicativeApp_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
      (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
  {- Arity: 3, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                           (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                           a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r
                      -> Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r
                        (Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                        b)
                   (\ (tpl :: r
                              -> Control.Monad.Trans.Except.ExceptT
                                   Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b) ->
                    tpl)
                     `cast`
                   (<r
                     -> Control.Monad.Trans.Except.ExceptT
                          Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <r>_R
                                  <Control.Monad.Trans.Except.ExceptT
                                     Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                  <b>_N))
                   (\ (r1 :: r) ->
                    Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                      @ GHC.Types.IO
                      @ Servant.Server.Internal.ServantErr.ServantErr
                      Service.$fApplicativeApp_$dFunctor
                      GHC.Base.$fMonadIO
                      @ a
                      @ b
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ (Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                         @ (a -> b)
                         f
                         r1)
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ (Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                         @ a
                         v
                         r1))) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fFunctorApp :: GHC.Base.Functor Service.App
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Service.App
                  Service.$fFunctorApp_$cfmap
                  Service.$fFunctorApp_$c<$ -}
bd4463004ba84504541f9e5ccc3e40e9
  $fFunctorApp1 ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,1*U)))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (eta :: a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                              (Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                              b)
                   (eta2 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (eta1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                            <Control.Monad.Trans.Except.ExceptT
                               Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                            <b>_N)
                         eta2)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Servant.Server.Internal.ServantErr.ServantErr>_N
                                <GHC.Types.IO>_R
                                <b>_N)
                           (GHC.Types.N:IO[0]
                                <Data.Either.Either
                                   Servant.Server.Internal.ServantErr.ServantErr b>_R))
                        eta3 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    case ipv1 of wild {
                      Data.Either.Left x
                      -> Data.Either.Left
                           @ Servant.Server.Internal.ServantErr.ServantErr
                           @ a
                           x
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ Servant.Server.Internal.ServantErr.ServantErr
                           @ a
                           eta } #) }) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fFunctorApp_$c<$ :: a -> Service.App b -> Service.App a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,1*U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fFunctorApp1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R Sym (Service.N:App[0]) <b>_N
                 ->_R Trans
                          (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                                              <GHC.Types.IO>_R
                                              <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Data.Pool.Pool
                                            Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Service.N:App[0]) <a>_N))) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fFunctorApp_$cfmap :: (a -> b) -> Service.App a -> Service.App b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,1*U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (Service.$fFunctorApp_$s$fFunctorReaderT_$cfmap
                   @ (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R Sym (Service.N:App[0]) <a>_N
                 ->_R Sym (Service.N:App[0]) <b>_N) -}
1e8c3927fb5fec574f2bcad3a90d5966
  $fFunctorApp_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,1*U)))><L,U><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: a -> b)
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             r
                             (Control.Monad.Trans.Except.ExceptT
                                Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                             a)
                   (eta1 :: r) ->
                 (GHC.Base.$
                    @ 'GHC.Types.PtrRepLifted
                    @ (r
                       -> Control.Monad.Trans.Except.ExceptT
                            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b)
                    @ (Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.Except.ExceptT
                            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                         b)
                    (\ (tpl :: r
                               -> Control.Monad.Trans.Except.ExceptT
                                    Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b) ->
                     tpl)
                      `cast`
                    (<r
                      -> Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b>_R
                     ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <r>_R
                                   <Control.Monad.Trans.Except.ExceptT
                                      Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                   <b>_N))
                    (let {
                       g :: r
                            -> Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO a
                       = Control.Monad.Trans.Reader.runReaderT
                           @ r
                           @ *
                           @ (Control.Monad.Trans.Except.ExceptT
                                Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                           @ a
                           eta
                     } in
                     (\ (x :: r)
                        (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                      (GHC.Base.$fFunctorIO_$cfmap
                         @ (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr a)
                         @ (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr b)
                         (Data.Either.$fApplicativeEither_$cfmap
                            @ Servant.Server.Internal.ServantErr.ServantErr
                            @ a
                            @ b
                            f)
                         (g x)
                           `cast`
                         (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                              <GHC.Types.IO>_R
                              <a>_N))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr b>_R)
                        eta2)
                       `cast`
                     (<r>_R
                      ->_R Trans
                               (Sym (GHC.Types.N:IO[0]
                                         <Data.Either.Either
                                            Servant.Server.Internal.ServantErr.ServantErr b>_R))
                               (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                         <Servant.Server.Internal.ServantErr.ServantErr>_N
                                         <GHC.Types.IO>_R
                                         <b>_N)))))
                   `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N
                      <r>_R
                      <Control.Monad.Trans.Except.ExceptT
                         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                      <b>_N)
                   eta1)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.Except.ExceptT
                            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                         a>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <r>_R
                               <Control.Monad.Trans.Except.ExceptT
                                  Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                               <b>_N)) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fMonadApp :: GHC.Base.Monad Service.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Service.App
                  Service.$fApplicativeApp
                  Service.$fMonadApp_$c>>=
                  Service.$fMonadApp_$c>>
                  Service.$fApplicativeApp_$cpure
                  Service.$fMonadApp_$cfail -}
db9e14d88bb44fb9249a8b031e380cbd
  $fMonadApp_$c>> :: Service.App a -> Service.App b -> Service.App b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (Service.$fMonadApp_$s$fMonadReaderT_$c>>
                   @ (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Service.N:App[0]) <a>_N
                 ->_R Sym (Service.N:App[0]) <b>_N
                 ->_R Sym (Service.N:App[0]) <b>_N) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fMonadApp_$c>>= ::
    Service.App a -> (a -> Service.App b) -> Service.App b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (Service.$fMonadApp_$s$fMonadReaderT_$c>>=
                   @ (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Service.N:App[0]) <a>_N
                 ->_R (<a>_R ->_R Sym (Service.N:App[0]) <b>_N)
                 ->_R Sym (Service.N:App[0]) <b>_N) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fMonadApp_$cfail :: GHC.Base.String -> Service.App a
  {- Arity: 3, Strictness: <B,U><B,A><B,U>x,
     Unfolding: InlineRule (0, True, True)
                (Service.$fMonadApp_$s$fMonadReaderT_$cfail
                   @ (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend))
                  `cast`
                (forall (a :: <*>_N).
                 <[GHC.Types.Char]>_R ->_R Sym (Service.N:App[0]) <a>_N) -}
1d46a9845f0ff501403e1616c8eded87
  $fMonadApp_$s$fMonadReaderT_$c>> ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.Except.ExceptT
                               Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                            a)
                   (k :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                           b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r
                      -> Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r
                        (Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                        b)
                   (\ (tpl :: r
                              -> Control.Monad.Trans.Except.ExceptT
                                   Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b) ->
                    tpl)
                     `cast`
                   (<r
                     -> Control.Monad.Trans.Except.ExceptT
                          Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <r>_R
                                  <Control.Monad.Trans.Except.ExceptT
                                     Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                  <b>_N))
                   (\ (r1 :: r) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Types.IO
                           (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr b))
                      @ (Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b)
                      (\ (tpl :: GHC.Types.IO
                                   (Data.Either.Either
                                      Servant.Server.Internal.ServantErr.ServantErr b)) ->
                       tpl)
                        `cast`
                      (<GHC.Types.IO
                          (Data.Either.Either
                             Servant.Server.Internal.ServantErr.ServantErr b)>_R
                       ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                     <Servant.Server.Internal.ServantErr.ServantErr>_N
                                     <GHC.Types.IO>_R
                                     <b>_N))
                      (GHC.Base.bindIO
                         @ (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr a)
                         @ (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr b)
                         (Control.Monad.Trans.Reader.runReaderT
                            @ r
                            @ *
                            @ (Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                            @ a
                            m1
                            r1)
                           `cast`
                         (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                              <GHC.Types.IO>_R
                              <a>_N)
                         (\ (a1 :: Data.Either.Either
                                     Servant.Server.Internal.ServantErr.ServantErr a)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case a1 of wild {
                            Data.Either.Left e1
                            -> (GHC.Base.returnIO
                                  @ (Data.Either.Either
                                       Servant.Server.Internal.ServantErr.ServantErr b)
                                  (Data.Either.Left
                                     @ Servant.Server.Internal.ServantErr.ServantErr
                                     @ b
                                     e1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.Either.Either
                                       Servant.Server.Internal.ServantErr.ServantErr b>_R)
                                 eta
                            Data.Either.Right x
                            -> (Control.Monad.Trans.Reader.runReaderT
                                  @ r
                                  @ *
                                  @ (Control.Monad.Trans.Except.ExceptT
                                       Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                                  @ b
                                  k
                                  r1)
                                 `cast`
                               (Trans
                                    (Control.Monad.Trans.Except.N:ExceptT[0]
                                         <Servant.Server.Internal.ServantErr.ServantErr>_N
                                         <GHC.Types.IO>_R
                                         <b>_N)
                                    (GHC.Types.N:IO[0]
                                         <Data.Either.Either
                                            Servant.Server.Internal.ServantErr.ServantErr b>_R))
                                 eta })
                           `cast`
                         (<Data.Either.Either
                             Servant.Server.Internal.ServantErr.ServantErr a>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <Data.Either.Either
                                           Servant.Server.Internal.ServantErr.ServantErr
                                           b>_R))))) -}
e3ccb3f743aebc6b0e84ebc0630225d7
  $fMonadApp_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
      a
    -> (a
        -> Control.Monad.Trans.Reader.ReaderT
             r
             (Control.Monad.Trans.Except.ExceptT
                Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
             b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.Except.ExceptT
                               Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                            a)
                   (k :: a
                         -> Control.Monad.Trans.Reader.ReaderT
                              r
                              (Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                              b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r
                      -> Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r
                        (Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                        b)
                   (\ (tpl :: r
                              -> Control.Monad.Trans.Except.ExceptT
                                   Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b) ->
                    tpl)
                     `cast`
                   (<r
                     -> Control.Monad.Trans.Except.ExceptT
                          Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <r>_R
                                  <Control.Monad.Trans.Except.ExceptT
                                     Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                  <b>_N))
                   (\ (r1 :: r) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Types.IO
                           (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr b))
                      @ (Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b)
                      (\ (tpl :: GHC.Types.IO
                                   (Data.Either.Either
                                      Servant.Server.Internal.ServantErr.ServantErr b)) ->
                       tpl)
                        `cast`
                      (<GHC.Types.IO
                          (Data.Either.Either
                             Servant.Server.Internal.ServantErr.ServantErr b)>_R
                       ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                     <Servant.Server.Internal.ServantErr.ServantErr>_N
                                     <GHC.Types.IO>_R
                                     <b>_N))
                      (GHC.Base.bindIO
                         @ (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr a)
                         @ (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr b)
                         (Control.Monad.Trans.Reader.runReaderT
                            @ r
                            @ *
                            @ (Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                            @ a
                            m1
                            r1)
                           `cast`
                         (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                              <GHC.Types.IO>_R
                              <a>_N)
                         (\ (a1 :: Data.Either.Either
                                     Servant.Server.Internal.ServantErr.ServantErr a)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case a1 of wild {
                            Data.Either.Left e1
                            -> (GHC.Base.returnIO
                                  @ (Data.Either.Either
                                       Servant.Server.Internal.ServantErr.ServantErr b)
                                  (Data.Either.Left
                                     @ Servant.Server.Internal.ServantErr.ServantErr
                                     @ b
                                     e1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.Either.Either
                                       Servant.Server.Internal.ServantErr.ServantErr b>_R)
                                 eta
                            Data.Either.Right x
                            -> (Control.Monad.Trans.Reader.runReaderT
                                  @ r
                                  @ *
                                  @ (Control.Monad.Trans.Except.ExceptT
                                       Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                                  @ b
                                  (k x)
                                  r1)
                                 `cast`
                               (Trans
                                    (Control.Monad.Trans.Except.N:ExceptT[0]
                                         <Servant.Server.Internal.ServantErr.ServantErr>_N
                                         <GHC.Types.IO>_R
                                         <b>_N)
                                    (GHC.Types.N:IO[0]
                                         <Data.Either.Either
                                            Servant.Server.Internal.ServantErr.ServantErr b>_R))
                                 eta })
                           `cast`
                         (<Data.Either.Either
                             Servant.Server.Internal.ServantErr.ServantErr a>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <Data.Either.Either
                                           Servant.Server.Internal.ServantErr.ServantErr
                                           b>_R))))) -}
3ff4dcd2fb9e65a4971e325a0ccf0e22
  $fMonadApp_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         a
  {- Arity: 3, Strictness: <B,U><B,A><B,U>x,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   eta :: GHC.Types.IO
                            (Data.Either.Either
                               Servant.Server.Internal.ServantErr.ServantErr a)
                   = GHC.Base.$fMonadIO_$cfail
                       @ (Data.Either.Either
                            Servant.Server.Internal.ServantErr.ServantErr a)
                       msg
                 } in
                 (\ (eta1 :: r) ->
                  GHC.Base.const
                    @ (Control.Monad.Trans.Except.ExceptT
                         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO a)
                    @ r
                    eta
                      `cast`
                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                              <GHC.Types.IO>_R
                              <a>_N))
                    eta1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <r>_R
                           <Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                           <a>_N))) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fMonadErrorApp ::
    Control.Monad.Error.Class.MonadError
      Servant.Server.Internal.ServantErr.ServantErr Service.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Servant.Server.Internal.ServantErr.ServantErr
                  @ Service.App
                  Service.$fMonadApp
                  Service.$fMonadErrorApp_$cthrowError
                  Service.$fMonadErrorApp_$ccatchError -}
49de06ad89c1ab489a7f71eade6d46de
  $fMonadErrorApp1 ::
    Control.Monad.Trans.Reader.ReaderT
      (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
      (Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
      a
    -> (Servant.Server.Internal.ServantErr.ServantErr
        -> Control.Monad.Trans.Reader.ReaderT
             (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
             (Control.Monad.Trans.Except.ExceptT
                Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
             a)
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                             (Control.Monad.Trans.Except.ExceptT
                                Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                             a)
                   (eta1 :: Servant.Server.Internal.ServantErr.ServantErr
                            -> Control.Monad.Trans.Reader.ReaderT
                                 (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                                 (Control.Monad.Trans.Except.ExceptT
                                    Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                                 a)
                   (eta2 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (eta
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                            <Control.Monad.Trans.Except.ExceptT
                               Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                            <a>_N)
                         eta2)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Servant.Server.Internal.ServantErr.ServantErr>_N
                                <GHC.Types.IO>_R
                                <a>_N)
                           (GHC.Types.N:IO[0]
                                <Data.Either.Either
                                   Servant.Server.Internal.ServantErr.ServantErr a>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left l
                   -> ((eta1 l)
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                            <Control.Monad.Trans.Except.ExceptT
                               Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                            <a>_N)
                         eta2)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Servant.Server.Internal.ServantErr.ServantErr>_N
                                <GHC.Types.IO>_R
                                <a>_N)
                           (GHC.Types.N:IO[0]
                                <Data.Either.Either
                                   Servant.Server.Internal.ServantErr.ServantErr a>_R))
                        ipv
                   Data.Either.Right r
                   -> (# ipv,
                         Data.Either.Right
                           @ Servant.Server.Internal.ServantErr.ServantErr
                           @ a
                           r #) } }) -}
91b10ec2e4ef566276d8d162ca5f16c8
  $fMonadErrorApp2 ::
    Servant.Server.Internal.ServantErr.ServantErr
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: Servant.Server.Internal.ServantErr.ServantErr)
                   (eta1 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta2,
                    Data.Either.Left
                      @ Servant.Server.Internal.ServantErr.ServantErr
                      @ a
                      eta #)) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fMonadErrorApp_$ccatchError ::
    Service.App a
    -> (Servant.Server.Internal.ServantErr.ServantErr -> Service.App a)
    -> Service.App a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fMonadErrorApp1
                  `cast`
                (forall (a :: <*>_N).
                 Sym (Service.N:App[0]) <a>_N
                 ->_R (<Servant.Server.Internal.ServantErr.ServantErr>_R
                       ->_R Sym (Service.N:App[0]) <a>_N)
                 ->_R Trans
                          (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                                              <GHC.Types.IO>_R
                                              <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Data.Pool.Pool
                                            Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Service.N:App[0]) <a>_N))) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fMonadErrorApp_$cthrowError ::
    Servant.Server.Internal.ServantErr.ServantErr -> Service.App a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fMonadErrorApp2
                  `cast`
                (forall (a :: <*>_N).
                 <Servant.Server.Internal.ServantErr.ServantErr>_R
                 ->_R Trans
                          (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                                              <GHC.Types.IO>_R
                                              <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Data.Pool.Pool
                                            Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Service.N:App[0]) <a>_N))) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fMonadIOApp :: Control.Monad.IO.Class.MonadIO Service.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Service.App Service.$fMonadApp Service.$fMonadIOApp_$cliftIO -}
e985cb347f8c4669b7f923d9cc73168b
  $fMonadIOApp1 ::
    GHC.Types.IO a
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,A><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: GHC.Types.IO a)
                   (eta1 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case eta `cast` (GHC.Types.N:IO[0] <a>_R)
                        eta2 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ Servant.Server.Internal.ServantErr.ServantErr
                      @ a
                      ipv1 #) }) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fMonadIOApp_$cliftIO :: GHC.Types.IO a -> Service.App a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fMonadIOApp1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Types.IO a>_R
                 ->_R Trans
                          (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                                              <GHC.Types.IO>_R
                                              <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Data.Pool.Pool
                                            Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Service.N:App[0]) <a>_N))) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fMonadReaderApp ::
    Control.Monad.Reader.Class.MonadReader
      Database.Persist.Sql.Types.ConnectionPool Service.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Persist.Sql.Types.ConnectionPool
                  @ Service.App
                  Service.$fMonadApp
                  Service.$fMonadReaderApp_$cask
                  Service.$fMonadReaderApp_$clocal
                  Service.$fMonadReaderApp_$creader -}
c9fefc5e6c77568f96de4c99277e5211
  $fMonadReaderApp1 ::
    (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
     -> a)
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: Data.Pool.Pool
                             Database.Persist.Sql.Types.Internal.SqlBackend
                           -> a)
                   (eta1 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s,
                    Data.Either.Right
                      @ Servant.Server.Internal.ServantErr.ServantErr
                      @ a
                      (eta eta1) #)) -}
51cf098f87aefa4b4f0f2596386d14c3
  $fMonadReaderApp2 ::
    (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
     -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
    -> Control.Monad.Trans.Reader.ReaderT
         (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         a
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: Data.Pool.Pool
                             Database.Persist.Sql.Types.Internal.SqlBackend
                           -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                              (Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                              a)
                   (eta2 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend) ->
                 eta1
                   `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N
                      <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                      <Control.Monad.Trans.Except.ExceptT
                         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                      <a>_N)
                   (eta eta2)) -}
c9a8e401f186194957871c78bb6224bd
  $fMonadReaderApp3 ::
    Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr
            (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Pool.Pool
                             Database.Persist.Sql.Types.Internal.SqlBackend)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s,
                    Data.Either.Right
                      @ Servant.Server.Internal.ServantErr.ServantErr
                      @ (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                      eta #)) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fMonadReaderApp_$cask ::
    Service.App Database.Persist.Sql.Types.ConnectionPool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fMonadReaderApp3
                  `cast`
                (Trans
                     (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                      ->_R Trans
                               (Sym (GHC.Types.N:IO[0]
                                         <Data.Either.Either
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            (Data.Pool.Pool
                                               Database.Persist.Sql.Types.Internal.SqlBackend)>_R))
                               (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                         <Servant.Server.Internal.ServantErr.ServantErr>_N
                                         <GHC.Types.IO>_R
                                         <Data.Pool.Pool
                                            Database.Persist.Sql.Types.Internal.SqlBackend>_N)))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Data.Pool.Pool
                                       Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                    <Control.Monad.Trans.Except.ExceptT
                                       Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                    <Data.Pool.Pool
                                       Database.Persist.Sql.Types.Internal.SqlBackend>_N))
                          (Sym (Service.N:App[0]) <Database.Persist.Sql.Types.ConnectionPool>_N))) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fMonadReaderApp_$clocal ::
    (Database.Persist.Sql.Types.ConnectionPool
     -> Database.Persist.Sql.Types.ConnectionPool)
    -> Service.App a -> Service.App a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fMonadReaderApp2
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
                  -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                 ->_R Sym (Service.N:App[0]) <a>_N
                 ->_R Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Data.Pool.Pool
                                       Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                    <Control.Monad.Trans.Except.ExceptT
                                       Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                    <a>_N))
                          (Sym (Service.N:App[0]) <a>_N)) -}
db9e14d88bb44fb9249a8b031e380cbd
  $fMonadReaderApp_$creader ::
    (Database.Persist.Sql.Types.ConnectionPool -> a) -> Service.App a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fMonadReaderApp1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
                  -> a>_R
                 ->_R Trans
                          (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                                              <GHC.Types.IO>_R
                                              <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Data.Pool.Pool
                                            Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Service.N:App[0]) <a>_N))) -}
e12b9cd54753b4cdb2094f7427ecc22d
  $s$fAllCTRender:a ::
    Servant.API.ContentTypes.AllCTRender
      '[Servant.API.ContentTypes.JSON]
      [Database.Persist.Class.PersistEntity.Entity Models.User]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.API.ContentTypes.JSON]
                  @ [Database.Persist.Class.PersistEntity.Entity Models.User]
                  (Servant.API.ContentTypes.$fAllCTRender:a_$cp1AllCTRender
                     @ Servant.API.ContentTypes.JSON
                     @ '[]
                     @ [Database.Persist.Class.PersistEntity.Entity Models.User]
                     Servant.API.ContentTypes.$fAcceptTYPEJSON_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Servant.API.ContentTypes.JSON>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Service.$s$fAllCTRender:a1)
                  (Servant.API.ContentTypes.$fAllCTRender:a_$chandleAcceptH
                     @ Servant.API.ContentTypes.JSON
                     @ '[]
                     @ [Database.Persist.Class.PersistEntity.Entity Models.User]
                     Servant.API.ContentTypes.$fAcceptTYPEJSON_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Servant.API.ContentTypes.JSON>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Service.$s$fAllCTRender:a1) -}
f3041a2c9474089abf2a87efd4620cf1
  $s$fAllCTRender:a1 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Servant.API.ContentTypes.JSON]
      [Database.Persist.Class.PersistEntity.Entity Models.User]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Service.$s$fAllCTRender:a_$s$fAllMimeRender:a0 -}
1fc687ad75b550c9d00df29636f8b9e1
  $s$fAllCTRender:a2 ::
    Data.Aeson.Types.Class.ToJSON
      [Database.Persist.Class.PersistEntity.Entity Models.User]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Service.$s$fAllCTRender:a_$s$fToJSON[] -}
fa839692f6668bf9b96ac433de7196cf
  $s$fAllCTRender:a3 ::
    Servant.API.ContentTypes.MimeRender
      Servant.API.ContentTypes.JSON
      [Database.Persist.Class.PersistEntity.Entity Models.User]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Service.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa -}
8bb150189a70ec73594c38b11b50e543
  $s$fAllCTRender:a_$s$fAllMimeRender:a0 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Servant.API.ContentTypes.JSON]
      [Database.Persist.Class.PersistEntity.Entity Models.User]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.API.ContentTypes.JSON]
                  @ [Database.Persist.Class.PersistEntity.Entity Models.User]
                  (Servant.API.ContentTypes.$fAllMimeRender:a0_$cp1AllMimeRender
                     @ Servant.API.ContentTypes.JSON
                     @ [Database.Persist.Class.PersistEntity.Entity Models.User]
                     Service.$s$fAllCTRender:a3)
                  Service.$s$fAllCTRender:a_$s$fAllMimeRender:a0_$callMimeRender -}
419e9aa9312aa13fcd470dc9dac15b81
  $s$fAllCTRender:a_$s$fAllMimeRender:a0_$callMimeRender ::
    Data.Proxy.Proxy '[Servant.API.ContentTypes.JSON]
    -> [Database.Persist.Class.PersistEntity.Entity Models.User]
    -> [(Network.HTTP.Media.MediaType.Internal.MediaType,
         Data.ByteString.Lazy.Internal.ByteString)]
  {- Arity: 2, Strictness: <L,A><L,1*U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Proxy.Proxy '[Servant.API.ContentTypes.JSON])
                   (eta1 :: [Database.Persist.Class.PersistEntity.Entity
                               Models.User]) ->
                 GHC.Types.:
                   @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                      Data.ByteString.Lazy.Internal.ByteString)
                   ((Servant.API.ContentTypes.$fMimeRenderTYPEJSONa_$cp1MimeRender
                       @ [Database.Persist.Class.PersistEntity.Entity Models.User]
                       Service.$s$fAllCTRender:a2)
                      `cast`
                    (Servant.API.ContentTypes.N:Accept[0]
                         <GHC.Types.*>_N <Servant.API.ContentTypes.JSON>_N)
                      (Data.Proxy.Proxy @ GHC.Types.* @ Servant.API.ContentTypes.JSON),
                    Service.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender
                      (Data.Proxy.Proxy @ GHC.Types.* @ Servant.API.ContentTypes.JSON)
                      eta1)
                   (GHC.Types.[]
                      @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                         Data.ByteString.Lazy.Internal.ByteString))) -}
120fdbfd2cf85695bffc8c1c297b206a
  $s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa ::
    Servant.API.ContentTypes.MimeRender
      Servant.API.ContentTypes.JSON
      [Database.Persist.Class.PersistEntity.Entity Models.User]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ Servant.API.ContentTypes.JSON
                  @ [Database.Persist.Class.PersistEntity.Entity Models.User]
                  (Servant.API.ContentTypes.$fMimeRenderTYPEJSONa_$cp1MimeRender
                     @ [Database.Persist.Class.PersistEntity.Entity Models.User]
                     Service.$s$fAllCTRender:a2)
                  Service.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender -}
deba6e7a65cb5e5c88604d99ad4477b9
  $s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender ::
    Data.Proxy.Proxy Servant.API.ContentTypes.JSON
    -> [Database.Persist.Class.PersistEntity.Entity Models.User]
    -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,A><L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Proxy.Proxy Servant.API.ContentTypes.JSON)
                   (eta :: [Database.Persist.Class.PersistEntity.Entity
                              Models.User]) ->
                 Data.ByteString.Builder.toLazyByteString
                   (case eta of wild {
                      []
                      -> Data.Aeson.Types.Internal.fromEncoding
                           Data.Aeson.Encode.Builder.emptyArray_
                      : x xs
                      -> Data.Aeson.Types.Internal.fromEncoding
                           (GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ Data.ByteString.Builder.Internal.Builder
                              @ Data.Aeson.Types.Internal.Encoding
                              (\ (tpl :: Data.ByteString.Builder.Internal.Builder) -> tpl)
                                `cast`
                              (<Data.ByteString.Builder.Internal.Builder>_R
                               ->_R Sym (Data.Aeson.Types.Internal.N:Encoding[0]))
                              (Data.ByteString.Builder.Internal.append
                                 (Data.ByteString.Builder.Prim.primBounded
                                    @ GHC.Types.Char
                                    (Data.ByteString.Builder.Prim.Internal.toB
                                       @ GHC.Types.Char
                                       Data.ByteString.Builder.Prim.ASCII.char7)
                                    (GHC.Types.C# '['#))
                                 (Data.ByteString.Builder.Internal.append
                                    (Data.Aeson.Types.Internal.fromEncoding
                                       (Data.Aeson.Encode.Builder.encodeToBuilder
                                          (Models.$fToJSONEntity_$ctoJSON x))
                                         `cast`
                                       (Sym (Data.Aeson.Types.Internal.N:Encoding[0])))
                                    (Data.ByteString.Builder.Internal.append
                                       (GHC.Base.foldr
                                          @ (Database.Persist.Class.PersistEntity.Entity
                                               Models.User)
                                          @ Data.ByteString.Builder.Internal.Builder
                                          (\ (v :: Database.Persist.Class.PersistEntity.Entity
                                                     Models.User)
                                             (vs :: Data.ByteString.Builder.Internal.Builder)[OneShot] ->
                                           Data.ByteString.Builder.Internal.append
                                             (Data.ByteString.Builder.Prim.primBounded
                                                @ GHC.Types.Char
                                                (Data.ByteString.Builder.Prim.Internal.toB
                                                   @ GHC.Types.Char
                                                   Data.ByteString.Builder.Prim.ASCII.char7)
                                                (GHC.Types.C# ','#))
                                             (Data.ByteString.Builder.Internal.append
                                                (Data.Aeson.Types.Internal.fromEncoding
                                                   (Data.Aeson.Encode.Builder.encodeToBuilder
                                                      (Models.$fToJSONEntity_$ctoJSON v))
                                                     `cast`
                                                   (Sym (Data.Aeson.Types.Internal.N:Encoding[0])))
                                                vs))
                                          Data.ByteString.Builder.Internal.empty
                                          xs)
                                       (Data.ByteString.Builder.Prim.primBounded
                                          @ GHC.Types.Char
                                          (Data.ByteString.Builder.Prim.Internal.toB
                                             @ GHC.Types.Char
                                             Data.ByteString.Builder.Prim.ASCII.char7)
                                          (GHC.Types.C# ']'#)))))) })) -}
a9f4844adbc455e0654e2d1997f8f61e
  $s$fAllCTRender:a_$s$fToJSON[] ::
    Data.Aeson.Types.Class.ToJSON
      [Database.Persist.Class.PersistEntity.Entity Models.User]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Database.Persist.Class.PersistEntity.Entity Models.User]
                  (\ (eta :: [Database.Persist.Class.PersistEntity.Entity
                                Models.User]) ->
                   case Data.Vector.Generic.new
                          @ Data.Vector.Vector
                          @ Data.Aeson.Types.Internal.Value
                          (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                          (Data.Vector.Generic.New.unstream
                             @ Data.Vector.Vector
                             @ Data.Aeson.Types.Internal.Value
                             (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                             (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                @ Data.Vector.Fusion.Util.Id
                                @ Data.Aeson.Types.Internal.Value
                                @ Data.Vector.Vector
                                Data.Vector.Fusion.Util.$fMonadId
                                Data.Vector.Fusion.Bundle.Size.Unknown
                                (GHC.Base.build
                                   @ Data.Aeson.Types.Internal.Value
                                   (\ @ b1
                                      (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                      (n :: b1)[OneShot] ->
                                    GHC.Base.foldr
                                      @ (Database.Persist.Class.PersistEntity.Entity Models.User)
                                      @ b1
                                      (GHC.Base.mapFB
                                         @ Data.Aeson.Types.Internal.Value
                                         @ b1
                                         @ (Database.Persist.Class.PersistEntity.Entity Models.User)
                                         c
                                         Models.$fToJSONEntity_$ctoJSON)
                                      n
                                      eta)))) of dt { Data.Vector.Vector ipv ipv1 ipv2 ->
                   Data.Aeson.Types.Internal.Array dt })
                  (Data.Aeson.Types.Instances.$fToJSON[]_$ctoEncoding
                     @ (Database.Persist.Class.PersistEntity.Entity Models.User)
                     Models.$fToJSONEntity) -}
934e5d87fe073bfc212334029df60b13
  $sserve2 ::
    Data.Proxy.Proxy
      ("users"
       Servant.API.Sub.:> Servant.API.Verbs.Verb
                            'Network.HTTP.Types.Method.GET
                            200
                            '[Servant.API.ContentTypes.JSON]
                            [Database.Persist.Class.PersistEntity.Entity Models.User])
    -> Servant.Server.Internal.Context.Context '[]
    -> Servant.Server.Internal.RoutingApplication.Delayed
         env
         (Servant.Server.Internal.Server
            ("users"
             Servant.API.Sub.:> Servant.API.Verbs.Verb
                                  'Network.HTTP.Types.Method.GET
                                  200
                                  '[Servant.API.ContentTypes.JSON]
                                  [Database.Persist.Class.PersistEntity.Entity Models.User]))
    -> Servant.Server.Internal.Router.Router env
  {- Arity: 3, Strictness: <S,1*H><L,A><L,U>m1, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ env
                   (w :: Data.Proxy.Proxy
                           ("users"
                            Servant.API.Sub.:> Servant.API.Verbs.Verb
                                                 'Network.HTTP.Types.Method.GET
                                                 200
                                                 '[Servant.API.ContentTypes.JSON]
                                                 [Database.Persist.Class.PersistEntity.Entity
                                                    Models.User]))
                   (w1 :: Servant.Server.Internal.Context.Context '[])
                   (w2 :: Servant.Server.Internal.RoutingApplication.Delayed
                            env
                            (Servant.Server.Internal.Server
                               ("users"
                                Servant.API.Sub.:> Servant.API.Verbs.Verb
                                                     'Network.HTTP.Types.Method.GET
                                                     200
                                                     '[Servant.API.ContentTypes.JSON]
                                                     [Database.Persist.Class.PersistEntity.Entity
                                                        Models.User]))) ->
                 case w of w3 { Data.Proxy.Proxy ->
                 Servant.Server.Internal.Router.StaticRouter
                   @ env
                   @ Servant.Server.Internal.RoutingApplication.RoutingApplication
                   (case GHC.Magic.runRW#
                           @ 'GHC.Types.PtrRepLifted
                           @ Data.Text.Internal.Text
                           Service.$sserve5 of ds1 { (#,#) ipv ipv1 ->
                    case ipv1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                    Data.Map.Base.Bin
                      @ Data.Text.Internal.Text
                      @ (Servant.Server.Internal.Router.Router'
                           env Servant.Server.Internal.RoutingApplication.RoutingApplication)
                      1#
                      dt
                      (Service.$sserve3
                         @ env
                         w2
                           `cast`
                         (Servant.Server.Internal.RoutingApplication.Delayed
                            <env>_R
                            (Sub (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                      <*>_N
                                      <"users">_N
                                      <Servant.API.Verbs.Verb
                                         'Network.HTTP.Types.Method.GET
                                         200
                                         '[Servant.API.ContentTypes.JSON]
                                         [Database.Persist.Class.PersistEntity.Entity
                                            Models.User]>_N
                                      <Control.Monad.Trans.Except.ExceptT
                                         Servant.Server.Internal.ServantErr.ServantErr
                                         GHC.Types.IO>_N)))_R)
                      (Data.Map.Base.Tip
                         @ Data.Text.Internal.Text
                         @ (Servant.Server.Internal.Router.Router'
                              env Servant.Server.Internal.RoutingApplication.RoutingApplication))
                      (Data.Map.Base.Tip
                         @ Data.Text.Internal.Text
                         @ (Servant.Server.Internal.Router.Router'
                              env
                              Servant.Server.Internal.RoutingApplication.RoutingApplication)) } })
                   (GHC.Types.[]
                      @ (env
                         -> Servant.Server.Internal.RoutingApplication.RoutingApplication)) }) -}
1b02d982d8d148fb0d704cb79b501db5
  $sserve3 ::
    Servant.Server.Internal.RoutingApplication.Delayed
      env
      (Servant.Server.Internal.Server
         (Servant.API.Verbs.Verb
            'Network.HTTP.Types.Method.GET
            200
            '[Servant.API.ContentTypes.JSON]
            [Database.Persist.Class.PersistEntity.Entity Models.User]))
    -> Servant.Server.Internal.Router.Router env
  {- Unfolding: (\ @ env ->
                 Servant.Server.Internal.$w$croute8
                   @ Network.HTTP.Types.Method.StdMethod
                   @ '[Servant.API.ContentTypes.JSON]
                   @ [Database.Persist.Class.PersistEntity.Entity Models.User]
                   @ 'Network.HTTP.Types.Method.GET
                   @ 200
                   @ '[]
                   Service.$s$fAllCTRender:a
                   Servant.API.Verbs.$fReflectMethodStdMethodGET_$creflectMethod
                     `cast`
                   (Sym (Servant.API.Verbs.N:ReflectMethod[0]
                             <Network.HTTP.Types.Method.StdMethod>_N
                             <'Network.HTTP.Types.Method.GET>_N))
                   Service.$sserve4
                     `cast`
                   (Trans
                        (Sym (GHC.TypeLits.N:SNat[0] <200>_P))
                        (Sym (GHC.TypeLits.N:KnownNat[0]) <200>_N))
                   @ env
                   (Data.Proxy.Proxy
                      @ *
                      @ (Servant.API.Verbs.Verb
                           'Network.HTTP.Types.Method.GET
                           200
                           '[Servant.API.ContentTypes.JSON]
                           [Database.Persist.Class.PersistEntity.Entity Models.User]))) -}
a5a62a28287dcfc1b74dc55cc7e2feca
  $sserve4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (200) -}
c11eb66507e35ee4b9a9cd04c16b4d0c
  $sserve5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Servant.Server.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Servant.Server.Internal.$fHasServerTYPE:>context20
                   Service.$sserve6
                   0#
                   ipv }) -}
f765bd10f4d7fe06b342176eeff9b573
  $sserve6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "users"#) -}
c4dd0754e7324d92e86f13c201b88e31
  $tc'App :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14546097608755231436##
                   951714808062704964##
                   Service.$trModule
                   Service.$tc'App1) -}
6677288359b093d51f676691aa288405
  $tc'App1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'App"#) -}
1cbecc60486fb0a84dce19c98fc13e23
  $tcApp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13944949901424524564##
                   4596190483088380805##
                   Service.$trModule
                   Service.$tcApp1) -}
a1f3a1fa24193a391d0c787254f2df4f
  $tcApp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "App"#) -}
25b9edb4d2bb4dace34610d3066dda2e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Service.$trModule2
                   Service.$trModule1) -}
1376256f7dbbfe83784fc96088b40ef2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Service"#) -}
d63bce6dc275a898690f21e7953b7e40
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "auth-service-0.1.0.0-AuA6V8MYMHu6qIHpXBhabJ"#) -}
db9e14d88bb44fb9249a8b031e380cbd
  type role App nominal
  newtype App a
    = App {runApp :: Control.Monad.Trans.Reader.ReaderT
                       Database.Persist.Sql.Types.ConnectionPool
                       (Control.Monad.Trans.Except.ExceptT
                          Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                       a}
bea2d8285c51def0f47e0884b34ba3e7
  allUsers ::
    Service.App
      [Database.Persist.Class.PersistEntity.Entity Models.User]
  {- Unfolding: (Models.dbAction
                   @ Service.App
                   @ [Database.Persist.Class.PersistEntity.Entity Models.User]
                   Service.$fMonadReaderApp
                   Service.$fMonadIOApp
                   Service.allUsers1
                     `cast`
                   (Trans
                        (<Database.Persist.Sql.Types.Internal.SqlBackend>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <[Database.Persist.Class.PersistEntity.Entity
                                           Models.User]>_R))
                        (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                  <GHC.Types.IO>_R
                                  <[Database.Persist.Class.PersistEntity.Entity
                                      Models.User]>_N)))) -}
08461f6ed68cde142245ad604053c1be
  allUsers1 ::
    Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [Database.Persist.Class.PersistEntity.Entity Models.User] #)
  {- Arity: 2,
     Unfolding: (\ (r1 :: Database.Persist.Sql.Types.Internal.SqlBackend)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (Service.allUsers_m1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Database.Persist.Sql.Types.Internal.SqlBackend>_R
                            <GHC.Types.IO>_R
                            <Data.Acquire.Internal.Acquire
                               (Data.Conduit.Internal.Conduit.Source
                                  GHC.Types.IO
                                  (Database.Persist.Class.PersistEntity.Entity Models.User))>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.Acquire.Internal.Acquire
                              (Data.Conduit.Internal.Conduit.Source
                                 GHC.Types.IO
                                 (Database.Persist.Class.PersistEntity.Entity Models.User))>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (Data.Acquire.Internal.with
                    @ GHC.Types.IO
                    @ (Data.Conduit.Internal.Conduit.Source
                         GHC.Types.IO
                         (Database.Persist.Class.PersistEntity.Entity Models.User))
                    @ [Database.Persist.Class.PersistEntity.Entity Models.User]
                    Control.Monad.Trans.Control.$fMonadBaseControlIOIO
                    ipv1
                    (Database.Persist.Class.PersistQuery.selectList1 @ Models.User)
                      `cast`
                    (<Data.Conduit.Internal.Conduit.Source
                        GHC.Types.IO
                        (Database.Persist.Class.PersistEntity.Entity Models.User)>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <[Database.Persist.Class.PersistEntity.Entity Models.User]>_R)))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <[Database.Persist.Class.PersistEntity.Entity Models.User]>_R)
                   ipv }) -}
29399e2da2b26b1b71b9de4f33d39247
  allUsers2 ::
    (Database.Persist.Class.PersistEntity.PersistEntity Models.User,
     Database.Persist.Sql.Types.Internal.SqlBackend
     Data.Type.Equality.~ Database.Persist.Sql.Types.Internal.SqlBackend)
  {- Unfolding: ((Models.$fPersistEntityUser,
                  Service.allUsers3
                    `cast`
                  (Sym (Data.Type.Equality.N:~[0]
                            <*>_N) <Database.Persist.Sql.Types.Internal.SqlBackend>_N <Database.Persist.Sql.Types.Internal.SqlBackend>_N))) -}
49b83308ac24cbd036aaa013f8b71604
  allUsers3 ::
    Database.Persist.Sql.Types.Internal.SqlBackend
    GHC.Types.~~ Database.Persist.Sql.Types.Internal.SqlBackend
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ Database.Persist.Sql.Types.Internal.SqlBackend
                   @ Database.Persist.Sql.Types.Internal.SqlBackend
                   @~ <Database.Persist.Sql.Types.Internal.SqlBackend>_N) -}
f48174728ae36407dcf49b7a9825e44e
  allUsers_m1 ::
    Control.Monad.Trans.Reader.ReaderT
      Database.Persist.Sql.Types.Internal.SqlBackend
      GHC.Types.IO
      (Data.Acquire.Internal.Acquire
         (Data.Conduit.Internal.Conduit.Source
            GHC.Types.IO
            (Database.Persist.Class.PersistEntity.Entity Models.User)))
  {- Unfolding: (Database.Persist.Sql.Orphan.PersistQuery.$fPersistQueryReadSqlBackend_$cselectSourceRes
                   @ Models.User
                   @ GHC.Types.IO
                   @ GHC.Types.IO
                   Service.allUsers2
                     `cast`
                   (GHC.Classes.(%,%)
                      <Database.Persist.Class.PersistEntity.PersistEntity Models.User>_N
                      ((Data.Type.Equality.~)
                         <*>_N
                         (Sym (Models.D:R:PersistEntityBackendUser[0]))
                         (Sym (Database.Persist.Sql.Types.Internal.D:R:BaseBackendSqlBackend[0])))_N)_R
                   Control.Monad.IO.Class.$fMonadIOIO
                   Control.Monad.IO.Class.$fMonadIOIO
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.Filter Models.User))
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.SelectOpt Models.User))) -}
b23ed814d816e9c8c2d258ab99f31470
  app ::
    Database.Persist.Sql.Types.ConnectionPool
    -> Network.Wai.Application
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (cp :: Database.Persist.Sql.Types.ConnectionPool) ->
                 Servant.Server.serveWithContext
                   @ AuthApi.AuthServiceApi
                   @ '[]
                   Service.$sserve2
                     `cast`
                   (Sym (Servant.Server.Internal.N:HasServer[0]
                             <*>_N
                             <"users"
                              Servant.API.Sub.:> Servant.API.Verbs.Verb
                                                   'Network.HTTP.Types.Method.GET
                                                   200
                                                   '[Servant.API.ContentTypes.JSON]
                                                   [Database.Persist.Class.PersistEntity.Entity
                                                      Models.User]>_N
                             <'[]>_N))
                   (Data.Proxy.Proxy @ * @ AuthApi.AuthServiceApi)
                   Servant.Server.Internal.Context.$WEmptyContext
                   (Service.allUsers
                      `cast`
                    (Trans
                         (Service.N:App[0] <[Database.Persist.Class.PersistEntity.Entity
                                               Models.User]>_N)
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N
                              <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                              <Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                              <[Database.Persist.Class.PersistEntity.Entity Models.User]>_N))
                      cp)
                     `cast`
                   (Trans
                        (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                       <Network.HTTP.Types.Method.StdMethod>_N
                                       <'[Servant.API.ContentTypes.JSON]>_N
                                       <[Database.Persist.Class.PersistEntity.Entity Models.User]>_N
                                       <'Network.HTTP.Types.Method.GET>_N
                                       <200>_N
                                       <Control.Monad.Trans.Except.ExceptT
                                          Servant.Server.Internal.ServantErr.ServantErr
                                          GHC.Types.IO>_N)))
                        (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                       <*>_N
                                       <"users">_N
                                       <Servant.API.Verbs.Verb
                                          'Network.HTTP.Types.Method.GET
                                          200
                                          '[Servant.API.ContentTypes.JSON]
                                          [Database.Persist.Class.PersistEntity.Entity
                                             Models.User]>_N
                                       <Control.Monad.Trans.Except.ExceptT
                                          Servant.Server.Internal.ServantErr.ServantErr
                                          GHC.Types.IO>_N))))) -}
5abd9d593ad14d514ae3a2db4b96170d
  appApi :: Data.Proxy.Proxy AuthApi.AuthServiceApi
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (Data.Proxy.Proxy @ * @ AuthApi.AuthServiceApi) -}
445ab91099af9b207cc00ec7de4cd0fb
  appToServer ::
    Database.Persist.Sql.Types.ConnectionPool
    -> Servant.Server.Internal.Server AuthApi.AuthServiceApi
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Service.appToServer1
                  `cast`
                (<Database.Persist.Sql.Types.ConnectionPool>_R
                 ->_R Trans
                          (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                         <Network.HTTP.Types.Method.StdMethod>_N
                                         <'[Servant.API.ContentTypes.JSON]>_N
                                         <[Database.Persist.Class.PersistEntity.Entity
                                             Models.User]>_N
                                         <'Network.HTTP.Types.Method.GET>_N
                                         <200>_N
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_N)))
                          (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                         <*>_N
                                         <"users">_N
                                         <Servant.API.Verbs.Verb
                                            'Network.HTTP.Types.Method.GET
                                            200
                                            '[Servant.API.ContentTypes.JSON]
                                            [Database.Persist.Class.PersistEntity.Entity
                                               Models.User]>_N
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_N)))) -}
c409d25676cb08f5a7534b7b18ab77ba
  appToServer1 ::
    Database.Persist.Sql.Types.ConnectionPool
    -> Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr
         GHC.Types.IO
         [Database.Persist.Class.PersistEntity.Entity Models.User]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ (cp :: Database.Persist.Sql.Types.ConnectionPool) ->
                 Service.allUsers
                   `cast`
                 (Trans
                      (Service.N:App[0] <[Database.Persist.Class.PersistEntity.Entity
                                            Models.User]>_N)
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           <Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                           <[Database.Persist.Class.PersistEntity.Entity Models.User]>_N))
                   cp) -}
47720b5856d0a575d9a58cf25cab6ac8
  convertApp ::
    Database.Persist.Sql.Types.ConnectionPool
    -> Service.App
       Servant.Utils.Enter.:~> Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)>,
     Unfolding: InlineRule (0, True, True)
                Service.convertApp1
                  `cast`
                (<Database.Persist.Sql.Types.ConnectionPool>_R
                 ->_R Sym (Servant.Utils.Enter.N::~>[0]
                               <Service.App>_R
                               <Control.Monad.Trans.Except.ExceptT
                                  Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R)) -}
fe0f5e93cd8524a03e79d035299ffc57
  convertApp1 ::
    Database.Persist.Sql.Types.ConnectionPool
    -> forall a.
       Service.App a
       -> Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (cp :: Database.Persist.Sql.Types.ConnectionPool)
                   @ a
                   (eta :: Service.App a) ->
                 eta
                   `cast`
                 (Trans
                      (Service.N:App[0] <a>_N)
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           <Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                           <a>_N))
                   cp) -}
29e16f25aa7be6668a1f7c509d79e70a
  runApp ::
    Service.App a
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.ConnectionPool
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         a
  RecSel Left Service.App
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Service.runApp1
                  `cast`
                (forall (a :: <*>_N).
                 <Service.App a>_R ->_R Service.N:App[0] <a>_N) -}
363fad415afad5c17662e34810561925
  runApp1 :: Service.App a -> Service.App a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Service.App a) -> ds) -}
d6d8019ff347629fe8cf26d22c85dba6
  userServer ::
    Servant.Server.Internal.ServerT AuthApi.AuthServiceApi Service.App
  {- Unfolding: InlineRule (0, True, True)
                Service.allUsers
                  `cast`
                (Trans
                     (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                    <Network.HTTP.Types.Method.StdMethod>_N
                                    <'[Servant.API.ContentTypes.JSON]>_N
                                    <[Database.Persist.Class.PersistEntity.Entity Models.User]>_N
                                    <'Network.HTTP.Types.Method.GET>_N
                                    <200>_N
                                    <Service.App>_N)))
                     (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                    <*>_N
                                    <"users">_N
                                    <Servant.API.Verbs.Verb
                                       'Network.HTTP.Types.Method.GET
                                       200
                                       '[Servant.API.ContentTypes.JSON]
                                       [Database.Persist.Class.PersistEntity.Entity Models.User]>_N
                                    <Service.App>_N)))) -}
instance GHC.Base.Applicative [Service.App]
  = Service.$fApplicativeApp
instance GHC.Base.Functor [Service.App] = Service.$fFunctorApp
instance GHC.Base.Monad [Service.App] = Service.$fMonadApp
instance Control.Monad.Error.Class.MonadError [Servant.Server.Internal.ServantErr.ServantErr,
                                               Service.App]
  = Service.$fMonadErrorApp
instance Control.Monad.IO.Class.MonadIO [Service.App]
  = Service.$fMonadIOApp
instance Control.Monad.Reader.Class.MonadReader [Data.Pool.Pool,
                                                 Service.App]
  = Service.$fMonadReaderApp
"SPEC/Service $fAllCTRender:a @ JSON @ '[] @ [Entity User]" [ALWAYS] forall ($dAccept :: Servant.API.ContentTypes.Accept
                                                                                           Servant.API.ContentTypes.JSON)
                                                                            ($dAllMime :: Servant.API.ContentTypes.AllMime
                                                                                            '[])
                                                                            ($dAllMimeRender :: Servant.API.ContentTypes.AllMimeRender
                                                                                                  '[Servant.API.ContentTypes.JSON]
                                                                                                  [Database.Persist.Class.PersistEntity.Entity
                                                                                                     Models.User])
  Servant.API.ContentTypes.$fAllCTRender:a @ Servant.API.ContentTypes.JSON
                                           @ '[]
                                           @ [Database.Persist.Class.PersistEntity.Entity
                                                Models.User]
                                           $dAccept
                                           $dAllMime
                                           $dAllMimeRender
  = Service.$s$fAllCTRender:a
"SPEC/Service $fAllMimeRender:a0 @ JSON @ [Entity User]" [ALWAYS] forall ($dMimeRender :: Servant.API.ContentTypes.MimeRender
                                                                                            Servant.API.ContentTypes.JSON
                                                                                            [Database.Persist.Class.PersistEntity.Entity
                                                                                               Models.User])
  Servant.API.ContentTypes.$fAllMimeRender:a0 @ Servant.API.ContentTypes.JSON
                                              @ [Database.Persist.Class.PersistEntity.Entity
                                                   Models.User]
                                              $dMimeRender
  = Service.$s$fAllCTRender:a_$s$fAllMimeRender:a0
"SPEC/Service $fAllMimeRender:a0_$callMimeRender @ JSON @ [Entity
                                                            User]" [ALWAYS] forall ($dMimeRender :: Servant.API.ContentTypes.MimeRender
                                                                                                                                                                        Servant.API.ContentTypes.JSON
                                                                                                                                                                        [Database.Persist.Class.PersistEntity.Entity
                                                                                                                                                                           Models.User])
  Servant.API.ContentTypes.$fAllMimeRender:a0_$callMimeRender @ Servant.API.ContentTypes.JSON
                                                              @ [Database.Persist.Class.PersistEntity.Entity
                                                                   Models.User]
                                                              $dMimeRender
  = Service.$s$fAllCTRender:a_$s$fAllMimeRender:a0_$callMimeRender
"SPEC/Service $fApplicativeReaderT_$c<*> @ (ExceptT ServantErr IO) _" [ALWAYS] forall @ r
                                                                                      ($dApplicative :: GHC.Base.Applicative
                                                                                                          (Control.Monad.Trans.Except.ExceptT
                                                                                                             Servant.Server.Internal.ServantErr.ServantErr
                                                                                                             GHC.Types.IO))
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ (Control.Monad.Trans.Except.ExceptT
                                                             Servant.Server.Internal.ServantErr.ServantErr
                                                             GHC.Types.IO)
                                                        @ r
                                                        $dApplicative
  = Service.$fApplicativeApp_$s$fApplicativeReaderT_$c<*> @ r
"SPEC/Service $fFunctorReaderT_$cfmap @ (ExceptT ServantErr IO) _" [ALWAYS] forall @ r
                                                                                   ($dFunctor :: GHC.Base.Functor
                                                                                                   (Control.Monad.Trans.Except.ExceptT
                                                                                                      Servant.Server.Internal.ServantErr.ServantErr
                                                                                                      GHC.Types.IO))
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ (Control.Monad.Trans.Except.ExceptT
                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                          GHC.Types.IO)
                                                     @ r
                                                     $dFunctor
  = Service.$fFunctorApp_$s$fFunctorReaderT_$cfmap @ r
"SPEC/Service $fMimeRenderTYPEJSONa @ [Entity User]" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.Class.ToJSON
                                                                                    [Database.Persist.Class.PersistEntity.Entity
                                                                                       Models.User])
  Servant.API.ContentTypes.$fMimeRenderTYPEJSONa @ [Database.Persist.Class.PersistEntity.Entity
                                                      Models.User]
                                                 $dToJSON
  = Service.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa
"SPEC/Service $fMimeRenderTYPEJSONa_$cmimeRender @ [Entity User]" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.Class.ToJSON
                                                                                                 [Database.Persist.Class.PersistEntity.Entity
                                                                                                    Models.User])
  Servant.API.ContentTypes.$fMimeRenderTYPEJSONa_$cmimeRender @ [Database.Persist.Class.PersistEntity.Entity
                                                                   Models.User]
                                                              $dToJSON
  = Service.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender
"SPEC/Service $fMonadReaderT_$c>> @ (ExceptT ServantErr IO) _" [ALWAYS] forall @ r
                                                                               ($dMonad :: GHC.Base.Monad
                                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                                Servant.Server.Internal.ServantErr.ServantErr
                                                                                                GHC.Types.IO))
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>> @ (Control.Monad.Trans.Except.ExceptT
                                                      Servant.Server.Internal.ServantErr.ServantErr
                                                      GHC.Types.IO)
                                                 @ r
                                                 $dMonad
  = Service.$fMonadApp_$s$fMonadReaderT_$c>> @ r
"SPEC/Service $fMonadReaderT_$c>>= @ (ExceptT ServantErr IO) _" [ALWAYS] forall @ r
                                                                                ($dMonad :: GHC.Base.Monad
                                                                                              (Control.Monad.Trans.Except.ExceptT
                                                                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                                                                 GHC.Types.IO))
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ (Control.Monad.Trans.Except.ExceptT
                                                       Servant.Server.Internal.ServantErr.ServantErr
                                                       GHC.Types.IO)
                                                  @ r
                                                  $dMonad
  = Service.$fMonadApp_$s$fMonadReaderT_$c>>= @ r
"SPEC/Service $fMonadReaderT_$cfail @ (ExceptT ServantErr IO) _" [ALWAYS] forall @ r
                                                                                 ($dMonad :: GHC.Base.Monad
                                                                                               (Control.Monad.Trans.Except.ExceptT
                                                                                                  Servant.Server.Internal.ServantErr.ServantErr
                                                                                                  GHC.Types.IO))
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ (Control.Monad.Trans.Except.ExceptT
                                                        Servant.Server.Internal.ServantErr.ServantErr
                                                        GHC.Types.IO)
                                                   @ r
                                                   $dMonad
  = Service.$fMonadApp_$s$fMonadReaderT_$cfail @ r
"SPEC/Service $fToJSON[] @ (Entity User)" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.Class.ToJSON
                                                                         (Database.Persist.Class.PersistEntity.Entity
                                                                            Models.User))
  Data.Aeson.Types.Instances.$fToJSON[] @ (Database.Persist.Class.PersistEntity.Entity
                                             Models.User)
                                        $dToJSON
  = Service.$s$fAllCTRender:a_$s$fToJSON[]
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

