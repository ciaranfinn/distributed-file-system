
==================== FINAL INTERFACE ====================
2016-12-07 18:00:07.201548 UTC

interface auth-service-0.1.0.0-6hTD0XPn3Lw9fV9T7HNQU:Service 8001
  interface hash: 8d62f508812951acb88819b43f31fb0c
  ABI hash: 241b8f32f5526f372b638909e2e0ddcd
  export-list hash: c729b44b3f02ee3e5c1d372d381a2705
  orphan hash: aca8d8dbc934a451fce892925d39e0d2
  flag hash: cb79fe25b2e43a87f3e6eff39d25ce76
  sig of: Nothing
  used TH splices: False
  where
exports:
  Service.app
  Service.appApi
  Service.appToServer
  Service.authService
  Service.convertApp
  Service.createUser
  Service.getToken
  Service.iso8601
  Service.secretKey
  Service.verify
  Service.App{Service.App runApp}
  Service.CipherKey{Service.CipherKey}
module dependencies: AuthApi Models
package dependencies: aeson-0.11.2.1@aeson-0.11.2.1-5ZQWuTFmffALcfpzDCXoOz
                      aeson-compat-0.3.6@aeson-compat-0.3.6-5wE6V2cyaFcB5no9HXBKW5
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR
                      auto-update-0.1.4@auto-update-0.1.4-GAesfFmqoZzBz6e09kRyzb
                      base-4.9.0.0
                      base-compat-0.9.1@base-compat-0.9.1-tmPpmtbHbvIDjFWbkjGrR
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-In9M41tLtcS9QYt3QpGpNY
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-KWDLbdBYSBoALiMW0LHIz1
                      blaze-html-0.8.1.2@blaze-html-0.8.1.2-2kD96kJB6JEGow1dP8IL6C
                      blaze-markup-0.7.1.0@blaze-markup-0.7.1.0-5a5pBG0fO8kJX4ke3K7j3D
                      byteable-0.1.1@byteable-0.1.1-15aIBCArSOBEnGxArzrDTM
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      bytestring-conversion-0.3.1@bytestring-conversion-0.3.1-EvX949he2UAKBbGbE7IZfu
                      case-insensitive-1.2.0.7@case-insensitive-1.2.0.7-FlqweN7AuKj9EdU2arVEt4
                      conduit-1.2.8@conduit-1.2.8-5FcKXI45VDc6lGPbFuJAWM
                      conduit-extra-1.1.15@conduit-extra-1.1.15-53svZ1V22a02WgMiq2YICw
                      containers-0.5.7.1@containers-0.5.7.1
                      cryptohash-0.11.9@cryptohash-0.11.9-9KNu0EEbreBFrmNJAeHgYz
                      cryptonite-0.19@cryptonite-0.19-G9PYO4oOEqhDTta2u9rAaU
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.2.6.2@directory-1.2.6.2
                      dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv
                      double-conversion-2.0.1.0@double-conversion-2.0.1.0-GBJeLbJOvPcIufCPOIwofV
                      easy-file-0.2.1@easy-file-0.2.1-bAUkz2rC2kFhBbPjw2Of5
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      fast-logger-2.4.7@fast-logger-2.4.7-E7H6TuZQzia59KuB50vayl
                      file-embed-0.0.10@file-embed-0.0.10-IXfudWSq57y1Athysk5ifZ
                      filepath-1.4.1.0@filepath-1.4.1.0
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      http-api-data-0.2.4@http-api-data-0.2.4-3jwS7OrPl3l4oJfG3gRZ5C
                      http-date-0.0.6.1@http-date-0.0.6.1-150spKQYCuoIrltdbMmYGs
                      http-media-0.6.4@http-media-0.6.4-82jDVCpdN5H696EFF5l5I4
                      http-types-0.9.1@http-types-0.9.1-8WdUZL4twHzANJbxvb1Aoj
                      integer-gmp-1.0.0.1
                      lifted-base-0.2.3.8@lifted-base-0.2.3.8-KLkd0w1UJqu6nE8oVTTEBy
                      memory-0.13@memory-0.13-ABHR5331zHK9scHPRr7afU
                      mime-types-0.1.0.7@mime-types-0.1.0.7-AxQ64wFjikqCSdK5pSeZvh
                      mmorph-1.0.9@mmorph-1.0.9-DmSwQqk5nLj7roLAcydGz
                      monad-control-1.0.1.0@monad-control-1.0.1.0-HoNEBoNfniX3vjSfkI7WTT
                      monad-logger-0.3.20.1@monad-logger-0.3.20.1-Id6Qefl6M7BBA3QajigPhK
                      monad-loops-0.4.3@monad-loops-0.4.3-1xZFtRVMQPC4X8bjTBWqNi
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG
                      network-uri-2.6.1.0@network-uri-2.6.1.0-DDHh2FNiPirBRgkuU9DEt2
                      old-locale-1.0.0.7@old-locale-1.0.0.7-6glXNhHF891B41ZfuI8hU8
                      old-time-1.1.0.3@old-time-1.1.0.3-IcvdkJUsE9M8t3io8peAEp
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      path-pieces-0.2.1@path-pieces-0.2.1-EQ6YdjSujhVE8ECatsqK1q
                      persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD
                      persistent-postgresql-2.6@persistent-postgresql-2.6-GvBYHyPf2H6GQQdyjSi6nK
                      persistent-template-2.5.1.6@persistent-template-2.5.1.6-L1UJyeURwQyFqq8arz68gW
                      postgresql-libpq-0.9.2.0@postgresql-libpq-0.9.2.0-IWEdPrPraPeE94ud73Ope3
                      postgresql-simple-0.5.2.1@postgresql-simple-0.5.2.1-3INwbAr3KaOko5GoR6I2w
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      pwstore-fast-2.4.4@pwstore-fast-2.4.4-HPFB6d7iulZFVWcZWd8b8K
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      resource-pool-0.2.3.2@resource-pool-0.2.3.2-9vTgJsy3ECMB5KkdzRIRAh
                      resourcet-1.1.8.1@resourcet-1.1.8.1-1XWaZ7RmVde330DM5PRI3Z
                      scientific-0.3.4.9@scientific-0.3.4.9-6oTYuCcx6H5BsTGU7D2Gk3
                      servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc
                      servant-server-0.8.1@servant-server-0.8.1-2W4dYHeOEv33BK078P3wA
                      silently-1.2.5@silently-1.2.5-Ek776fxSdtm4h8aXqt6CNw
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      stm-chans-3.0.0.4@stm-chans-3.0.0.4-4lLWE8CZnvmDZJW5bKkus1
                      string-conversions-0.4@string-conversions-0.4-8T0UFmRDEly2gsNJzmHrNQ
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-1j5dGjxxtiTDuAsO86iSk0
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-25SoAegOdaF8rLEnnb5jPI
                      unix-2.7.2.0@unix-2.7.2.0
                      unix-compat-0.4.2.0@unix-compat-0.4.2.0-GNHotEMWE5dJ4oYFhgibIV
                      unix-time-0.3.7@unix-time-0.3.7-HcxGsrnTmTlC98pyanzoMW
                      unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-2T8mBCuEDlXDo8zed8Onw4
                      uuid-types-1.0.3@uuid-types-1.0.3-1qmdgBeDGlbCUibOmxVGqx
                      vault-0.3.0.6@vault-0.3.0.6-CA9Xj82tAPe9nD32xVMgDG
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
                      wai-3.2.1.1@wai-3.2.1.1-f77bMYZGLQBAD3XJrvGiW
                      wai-app-static-3.1.6.1@wai-app-static-3.1.6.1-6csRgbgolyoCCOLw42RlBs
                      word8-0.1.2@word8-0.1.2-2E1SgvvAV2fK8vZPDHbRan
                      zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV
orphans: aeson-0.11.2.1@aeson-0.11.2.1-5ZQWuTFmffALcfpzDCXoOz:Data.Aeson.Types.Generic
         aeson-0.11.2.1@aeson-0.11.2.1-5ZQWuTFmffALcfpzDCXoOz:Data.Aeson.Types.Instances
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.Text.Internal
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket
         persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Sql.Orphan.PersistStore
         persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Sql.Orphan.PersistUnique
         persistent-template-2.5.1.6@persistent-template-2.5.1.6-L1UJyeURwQyFqq8arz68gW:Database.Persist.TH
         pwstore-fast-2.4.4@pwstore-fast-2.4.4-HPFB6d7iulZFVWcZWd8b8K:Crypto.PasswordStore
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         unix-time-0.3.7@unix-time-0.3.7-HcxGsrnTmTlC98pyanzoMW:Data.UnixTime.Diff
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.Internal.Types
                         auth-service-0.1.0.0-6hTD0XPn3Lw9fV9T7HNQU:AuthApi
                         auth-service-0.1.0.0-6hTD0XPn3Lw9fV9T7HNQU:Models
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv:Data.DList
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         monad-control-1.0.1.0@monad-control-1.0.1.0-HoNEBoNfniX3vjSfkI7WTT:Control.Monad.Trans.Control
                         monad-logger-0.3.20.1@monad-logger-0.3.20.1-Id6Qefl6M7BBA3QajigPhK:Control.Monad.Logger
                         network-uri-2.6.1.0@network-uri-2.6.1.0-DDHh2FNiPirBRgkuU9DEt2:Network.URI
                         persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Class.PersistConfig
                         persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Sql.Orphan.PersistStore
                         persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Sql.Types.Internal
                         persistent-postgresql-2.6@persistent-postgresql-2.6-GvBYHyPf2H6GQQdyjSi6nK:Database.Persist.Postgresql
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         resourcet-1.1.8.1@resourcet-1.1.8.1-1XWaZ7RmVde330DM5PRI3Z:Control.Monad.Trans.Resource.Internal
                         servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc:Servant.API.ContentTypes
                         servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc:Servant.API.Verbs
                         servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc:Servant.Utils.Links
                         servant-server-0.8.1@servant-server-0.8.1-2W4dYHeOEv33BK078P3wA:Servant.Server.Internal
                         servant-server-0.8.1@servant-server-0.8.1-2W4dYHeOEv33BK078P3wA:Servant.Server.Internal.BasicAuth
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-1qmdgBeDGlbCUibOmxVGqx:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-1qmdgBeDGlbCUibOmxVGqx:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV:Codec.Compression.Zlib.Stream
import  -/  aeson-0.11.2.1@aeson-0.11.2.1-5ZQWuTFmffALcfpzDCXoOz:Data.Aeson 5c6008252675af8a24566bc8465eebdc
import  -/  aeson-0.11.2.1@aeson-0.11.2.1-5ZQWuTFmffALcfpzDCXoOz:Data.Aeson.Encode.Functions f206417fc4decb2bce8d36accb55ccf8
import  -/  AuthApi 3da916033f0b030d07027517c255271e
  exports: 75723a35b07df244ae1b135d33f41211
  AuthServiceApi cb1af7eee46ce9eefbb753bff443b974
  ResponseData 83aa84a2eaaac02ad18beac38c63b23a
  ResponseData dc65d435c55992171f18235ce5563a98
  ResponseToken 4b168e8f84718d3af817291d27936852
  ResponseToken b7e605469736261c995d929fa9b52307
  Token 671f45ce5cc20fe55c7e8fe71ab50a99
  email f7bde545870ddfd644843e5856d5bc7e
  expiryTime 679293c019ad9545cf68b3ee55a7ae5d
  status 83818112c0a5c2bce9effd7abdb791b6
  token 850d58b23013459a5c309a4e1d9fe1c5
import  -/  Models c845168f25478b68c3add6967b52ad6f
  exports: a53e57fa6ca74bca2bcdbd24ada5383c
  User 2645ba58eff83d9fd535972fa7916fa6
  User b7365e6a16ec2a76b4fc276c9e8eb90a
  UserEmail c17d39f80b483df0190fe54785059db7
  dbAction b4f6e134d819e211ab08a47ff394151b
  userEmail 5b66c3891c896a4b1316c64f4ba063f7
  userPassword a79f368643e916c1db63cbda6f04994c
import  -/  base-4.9.0.0:Control.Monad.IO.Class d702028d883e700bd7066b031147030d
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Proxy aa86c72628cf3b1ceb0816ca84687d80
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString 1e4e7fc94303c79e3e10c7f5054420f7
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 6aef0058c6bf280aaddfe6ef70d5f28b
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Internal 96a214b84fd13ce168aecf88c70c8f1b
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy.Char8 22406b4bf44ab096084a9ba406db8a02
import  -/  cryptonite-0.19@cryptonite-0.19-G9PYO4oOEqhDTta2u9rAaU:Crypto.Cipher.AES 650d8d9fdd96ebaeb5fc63da84cd1ee9
import  -/  cryptonite-0.19@cryptonite-0.19-G9PYO4oOEqhDTta2u9rAaU:Crypto.Cipher.Types dd4ddfc0798c95399d91c82484d5dd30
import  -/  cryptonite-0.19@cryptonite-0.19-G9PYO4oOEqhDTta2u9rAaU:Crypto.Error 9106a17a690c49dd6757058b5efd7885
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Error.Class f139fe3464686c34428880c6a5173636
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Except 99ba8f4995df0e7f2f512551a0ca666a
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader 859b39f57eb3bed457106c30aac21473
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader.Class a2c7beb266585be238cfe9f5989c52b7
import  -/  persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist 506a8385e99497f86fb9b5ecfccfc606
import  -/  persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Class.PersistEntity 16dc9aa41de02addc67315556e1e5675
import  -/  persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Class.PersistQuery 898ff247336cf9e932a4a05f18e08420
import  -/  persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Class.PersistUnique a6f5de5fad8e0034db26bc98e9b01e0a
import  -/  persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Sql.Orphan.PersistStore 1f3788b76df3f62841a363559f78d694
import  -/  persistent-2.6@persistent-2.6-1lE9S4auQBGDBFFzb0JIqD:Database.Persist.Sql.Types 28ab73798fb587e82ac34b8fd4fe757c
import  -/  persistent-postgresql-2.6@persistent-postgresql-2.6-GvBYHyPf2H6GQQdyjSi6nK:Database.Persist.Postgresql be3582dc9599bd8f4ee48c6f9709331d
import  -/  pwstore-fast-2.4.4@pwstore-fast-2.4.4-HPFB6d7iulZFVWcZWd8b8K:Crypto.PasswordStore dfba134ba07181ca9e8ae5108cb59c05
import  -/  servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc:Servant.API.Alternative 92637ee25abfd34ba68ce3f6aae805fb
import  -/  servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc:Servant.Utils.Enter 7de8c2005e1a9cd734a0b0a1a905d073
import  -/  servant-server-0.8.1@servant-server-0.8.1-2W4dYHeOEv33BK078P3wA:Servant 4e8fd52b06af1cb338d7389eb77ee11b
import  -/  servant-server-0.8.1@servant-server-0.8.1-2W4dYHeOEv33BK078P3wA:Servant.Server bea9e51d6973e4d625d4dc2c8aac41e8
import  -/  servant-server-0.8.1@servant-server-0.8.1-2W4dYHeOEv33BK078P3wA:Servant.Server.Internal 9c3368d63aa676e11df8e9753eae51ff
import  -/  servant-server-0.8.1@servant-server-0.8.1-2W4dYHeOEv33BK078P3wA:Servant.Server.Internal.ServantErr 9e0432efe4e8999c1ff1fb94acde3354
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock 123f4f3108b813affbe0d12c8a29799f
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.POSIX 443b50fece9562ebea641f09f7e4b27a
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.UTC 894a91a871b701e4b21d43036bbeeba1
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.UTCDiff a878f0d3b1385a6bf951a6b6abacbe77
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Format 27cb95f964a30cb92bacdbe49c3edd92
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Locale c145edcf6f9ed5eb13f88f2adc21a4ef
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Except 71b1d86204f6908788cb5223e3c73193
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader e4096b104cf1a0df8752e81669ef6a24
import  -/  wai-3.2.1.1@wai-3.2.1.1-f77bMYZGLQBAD3XJrvGiW:Network.Wai d1b73469fdcbc6b9af0b9cdf32c02363
994b784d54577b0ed4c3fe93fed4d5b5
  $fApplicativeApp :: GHC.Base.Applicative Service.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Service.App
                  Service.$fFunctorApp
                  Service.$fApplicativeApp_$cpure
                  Service.$fApplicativeApp_$c<*>
                  Service.$fApplicativeApp_$c*>
                  Service.$fApplicativeApp_$c<* -}
58bd7b98eb6c15f21a5f2de0c908a8b4
  $fApplicativeApp1 ::
    Control.Monad.Trans.Reader.ReaderT
      (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
      (Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO a
  {- Arity: 3, Strictness: <L,C(C1(U(U,1*U)))><L,1*C1(U)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                             (Control.Monad.Trans.Except.ExceptT
                                Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                             a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                              (Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                              b)
                   (eta2 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend) ->
                 Control.Monad.Trans.Except.$w$c<*>
                   @ GHC.Types.IO
                   @ Servant.Server.Internal.ServantErr.ServantErr
                   GHC.Base.$fMonadIO
                   @ b
                   @ a
                   (\ (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (eta
                            `cast`
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                               <Control.Monad.Trans.Except.ExceptT
                                  Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                               <a>_N)
                            eta2)
                           `cast`
                         (Trans
                              (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Servant.Server.Internal.ServantErr.ServantErr>_N
                                   <GHC.Types.IO>_R
                                   <a>_N)
                              (GHC.Types.N:IO[0]
                                   <Data.Either.Either
                                      Servant.Server.Internal.ServantErr.ServantErr a>_R))
                           eta3 of ds { (#,#) ipv ipv1 ->
                    (# ipv,
                       case ipv1 of wild {
                         Data.Either.Left x
                         -> Data.Either.Left
                              @ Servant.Server.Internal.ServantErr.ServantErr
                              @ (b -> a)
                              x
                         Data.Either.Right y
                         -> Data.Either.Right
                              @ Servant.Server.Internal.ServantErr.ServantErr
                              @ (b -> a)
                              (\ (ds1 :: b) -> y) } #) })
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Servant.Server.Internal.ServantErr.ServantErr (b -> a)>_R))
                        (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <Servant.Server.Internal.ServantErr.ServantErr>_N
                                  <GHC.Types.IO>_R
                                  <b -> a>_N)))
                   (eta1
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N
                         <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                         <Control.Monad.Trans.Except.ExceptT
                            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                         <b>_N)
                      eta2)) -}
c3053ce204085258f4d18ff6fb389b52
  $fApplicativeApp2 ::
    Control.Monad.Trans.Reader.ReaderT
      (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
      (Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b
  {- Arity: 3, Strictness: <L,C(C1(U(U,1*U)))><L,1*C1(U)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                             (Control.Monad.Trans.Except.ExceptT
                                Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                             a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                              (Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                              b)
                   (eta2 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend) ->
                 Control.Monad.Trans.Except.$w$c<*>
                   @ GHC.Types.IO
                   @ Servant.Server.Internal.ServantErr.ServantErr
                   GHC.Base.$fMonadIO
                   @ b
                   @ b
                   (\ (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (eta
                            `cast`
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                               <Control.Monad.Trans.Except.ExceptT
                                  Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                               <a>_N)
                            eta2)
                           `cast`
                         (Trans
                              (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Servant.Server.Internal.ServantErr.ServantErr>_N
                                   <GHC.Types.IO>_R
                                   <a>_N)
                              (GHC.Types.N:IO[0]
                                   <Data.Either.Either
                                      Servant.Server.Internal.ServantErr.ServantErr a>_R))
                           eta3 of ds { (#,#) ipv ipv1 ->
                    (# ipv,
                       case ipv1 of wild {
                         Data.Either.Left x
                         -> Data.Either.Left
                              @ Servant.Server.Internal.ServantErr.ServantErr
                              @ (b -> b)
                              x
                         Data.Either.Right y -> Service.$fApplicativeApp3 @ b } #) })
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Servant.Server.Internal.ServantErr.ServantErr (b -> b)>_R))
                        (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <Servant.Server.Internal.ServantErr.ServantErr>_N
                                  <GHC.Types.IO>_R
                                  <b -> b>_N)))
                   (eta1
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N
                         <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                         <Control.Monad.Trans.Except.ExceptT
                            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                         <b>_N)
                      eta2)) -}
bc3d67c9118ff269d73e284408160655
  $fApplicativeApp3 ::
    Data.Either.Either
      Servant.Server.Internal.ServantErr.ServantErr (b -> b)
  {- HasNoCafRefs,
     Unfolding: (\ @ b ->
                 Data.Either.Right
                   @ Servant.Server.Internal.ServantErr.ServantErr
                   @ (b -> b)
                   (Service.$fApplicativeApp4 @ b)) -}
99b9f341179f12abd52c2307a3fb4b5c
  $fApplicativeApp4 :: b -> b
  {- Arity: 1, HasNoCafRefs, Unfolding: (\ @ b (eta :: b) -> eta) -}
c8ef1ee8fbdfe2f3ed51585a783597e9
  $fApplicativeApp5 ::
    a
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: a)
                   (eta1 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta2,
                    Data.Either.Right
                      @ Servant.Server.Internal.ServantErr.ServantErr
                      @ a
                      eta #)) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fApplicativeApp_$c*> ::
    Service.App a -> Service.App b -> Service.App b
  {- Arity: 3, Strictness: <L,C(C1(U(U,1*U)))><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fApplicativeApp2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Service.N:App[0]) <a>_N
                 ->_R Sym (Service.N:App[0]) <b>_N
                 ->_R Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Data.Pool.Pool
                                       Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                    <Control.Monad.Trans.Except.ExceptT
                                       Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                    <b>_N))
                          (Sym (Service.N:App[0]) <b>_N)) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fApplicativeApp_$c<* ::
    Service.App a -> Service.App b -> Service.App a
  {- Arity: 3, Strictness: <L,C(C1(U(U,1*U)))><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fApplicativeApp1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Service.N:App[0]) <a>_N
                 ->_R Sym (Service.N:App[0]) <b>_N
                 ->_R Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Data.Pool.Pool
                                       Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                    <Control.Monad.Trans.Except.ExceptT
                                       Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                    <a>_N))
                          (Sym (Service.N:App[0]) <a>_N)) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fApplicativeApp_$c<*> ::
    Service.App (a -> b) -> Service.App a -> Service.App b
  {- Arity: 3, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                (Service.$fApplicativeApp_$s$fApplicativeReaderT_$c<*>
                   @ (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Service.N:App[0]) <a -> b>_N
                 ->_R Sym (Service.N:App[0]) <a>_N
                 ->_R Sym (Service.N:App[0]) <b>_N) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fApplicativeApp_$cpure :: a -> Service.App a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fApplicativeApp5
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R
                 ->_R Trans
                          (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                                              <GHC.Types.IO>_R
                                              <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Data.Pool.Pool
                                            Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Service.N:App[0]) <a>_N))) -}
773305913e3a2c65267f0235c58c937b
  $fApplicativeApp_$dFunctor :: GHC.Base.Functor GHC.Types.IO
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Base.$fFunctorIO -}
de0739202976279f701dee7b2044fe13
  $fApplicativeApp_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
      (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
  {- Arity: 3, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                           (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                           a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r
                      -> Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r
                        (Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                        b)
                   (\ (tpl :: r
                              -> Control.Monad.Trans.Except.ExceptT
                                   Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b) ->
                    tpl)
                     `cast`
                   (<r
                     -> Control.Monad.Trans.Except.ExceptT
                          Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <r>_R
                                  <Control.Monad.Trans.Except.ExceptT
                                     Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                  <b>_N))
                   (\ (r1 :: r) ->
                    Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                      @ GHC.Types.IO
                      @ Servant.Server.Internal.ServantErr.ServantErr
                      Service.$fApplicativeApp_$dFunctor
                      GHC.Base.$fMonadIO
                      @ a
                      @ b
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ (Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                         @ (a -> b)
                         f
                         r1)
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ (Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                         @ a
                         v
                         r1))) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fFunctorApp :: GHC.Base.Functor Service.App
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Service.App
                  Service.$fFunctorApp_$cfmap
                  Service.$fFunctorApp_$c<$ -}
ac7fdf186136773cd61e9d62652b75db
  $fFunctorApp1 ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,1*U)))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (eta :: a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                              (Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                              b)
                   (eta2 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (eta1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                            <Control.Monad.Trans.Except.ExceptT
                               Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                            <b>_N)
                         eta2)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Servant.Server.Internal.ServantErr.ServantErr>_N
                                <GHC.Types.IO>_R
                                <b>_N)
                           (GHC.Types.N:IO[0]
                                <Data.Either.Either
                                   Servant.Server.Internal.ServantErr.ServantErr b>_R))
                        eta3 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    case ipv1 of wild {
                      Data.Either.Left x
                      -> Data.Either.Left
                           @ Servant.Server.Internal.ServantErr.ServantErr
                           @ a
                           x
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ Servant.Server.Internal.ServantErr.ServantErr
                           @ a
                           eta } #) }) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fFunctorApp_$c<$ :: a -> Service.App b -> Service.App a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,1*U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fFunctorApp1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R Sym (Service.N:App[0]) <b>_N
                 ->_R Trans
                          (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                                              <GHC.Types.IO>_R
                                              <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Data.Pool.Pool
                                            Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Service.N:App[0]) <a>_N))) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fFunctorApp_$cfmap :: (a -> b) -> Service.App a -> Service.App b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,1*U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (Service.$fFunctorApp_$s$fFunctorReaderT_$cfmap
                   @ (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R Sym (Service.N:App[0]) <a>_N
                 ->_R Sym (Service.N:App[0]) <b>_N) -}
92a855e5b7597885cba2b32ce098b7f6
  $fFunctorApp_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,1*U)))><L,U><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: a -> b)
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             r
                             (Control.Monad.Trans.Except.ExceptT
                                Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                             a)
                   (eta1 :: r) ->
                 (GHC.Base.$
                    @ 'GHC.Types.PtrRepLifted
                    @ (r
                       -> Control.Monad.Trans.Except.ExceptT
                            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b)
                    @ (Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.Except.ExceptT
                            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                         b)
                    (\ (tpl :: r
                               -> Control.Monad.Trans.Except.ExceptT
                                    Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b) ->
                     tpl)
                      `cast`
                    (<r
                      -> Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b>_R
                     ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <r>_R
                                   <Control.Monad.Trans.Except.ExceptT
                                      Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                   <b>_N))
                    (let {
                       g :: r
                            -> Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO a
                       = Control.Monad.Trans.Reader.runReaderT
                           @ r
                           @ *
                           @ (Control.Monad.Trans.Except.ExceptT
                                Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                           @ a
                           eta
                     } in
                     (\ (x :: r)
                        (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                      (GHC.Base.$fFunctorIO_$cfmap
                         @ (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr a)
                         @ (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr b)
                         (Data.Either.$fApplicativeEither_$cfmap
                            @ Servant.Server.Internal.ServantErr.ServantErr
                            @ a
                            @ b
                            f)
                         (g x)
                           `cast`
                         (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                              <GHC.Types.IO>_R
                              <a>_N))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr b>_R)
                        eta2)
                       `cast`
                     (<r>_R
                      ->_R Trans
                               (Sym (GHC.Types.N:IO[0]
                                         <Data.Either.Either
                                            Servant.Server.Internal.ServantErr.ServantErr b>_R))
                               (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                         <Servant.Server.Internal.ServantErr.ServantErr>_N
                                         <GHC.Types.IO>_R
                                         <b>_N)))))
                   `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N
                      <r>_R
                      <Control.Monad.Trans.Except.ExceptT
                         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                      <b>_N)
                   eta1)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.Except.ExceptT
                            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                         a>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <r>_R
                               <Control.Monad.Trans.Except.ExceptT
                                  Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                               <b>_N)) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fMonadApp :: GHC.Base.Monad Service.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Service.App
                  Service.$fApplicativeApp
                  Service.$fMonadApp_$c>>=
                  Service.$fMonadApp_$c>>
                  Service.$fApplicativeApp_$cpure
                  Service.$fMonadApp_$cfail -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fMonadApp_$c>> :: Service.App a -> Service.App b -> Service.App b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (Service.$fMonadApp_$s$fMonadReaderT_$c>>
                   @ (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Service.N:App[0]) <a>_N
                 ->_R Sym (Service.N:App[0]) <b>_N
                 ->_R Sym (Service.N:App[0]) <b>_N) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fMonadApp_$c>>= ::
    Service.App a -> (a -> Service.App b) -> Service.App b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (Service.$fMonadApp_$s$fMonadReaderT_$c>>=
                   @ (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Service.N:App[0]) <a>_N
                 ->_R (<a>_R ->_R Sym (Service.N:App[0]) <b>_N)
                 ->_R Sym (Service.N:App[0]) <b>_N) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fMonadApp_$cfail :: GHC.Base.String -> Service.App a
  {- Arity: 3, Strictness: <B,U><B,A><B,U>x,
     Unfolding: InlineRule (0, True, True)
                (Service.$fMonadApp_$s$fMonadReaderT_$cfail
                   @ (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend))
                  `cast`
                (forall (a :: <*>_N).
                 <[GHC.Types.Char]>_R ->_R Sym (Service.N:App[0]) <a>_N) -}
b10583fe793c26d2b4ac674c54257b4c
  $fMonadApp_$s$fMonadReaderT_$c>> ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.Except.ExceptT
                               Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                            a)
                   (k :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                           b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r
                      -> Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r
                        (Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                        b)
                   (\ (tpl :: r
                              -> Control.Monad.Trans.Except.ExceptT
                                   Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b) ->
                    tpl)
                     `cast`
                   (<r
                     -> Control.Monad.Trans.Except.ExceptT
                          Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <r>_R
                                  <Control.Monad.Trans.Except.ExceptT
                                     Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                  <b>_N))
                   (\ (r1 :: r) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Types.IO
                           (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr b))
                      @ (Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b)
                      (\ (tpl :: GHC.Types.IO
                                   (Data.Either.Either
                                      Servant.Server.Internal.ServantErr.ServantErr b)) ->
                       tpl)
                        `cast`
                      (<GHC.Types.IO
                          (Data.Either.Either
                             Servant.Server.Internal.ServantErr.ServantErr b)>_R
                       ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                     <Servant.Server.Internal.ServantErr.ServantErr>_N
                                     <GHC.Types.IO>_R
                                     <b>_N))
                      (GHC.Base.bindIO
                         @ (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr a)
                         @ (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr b)
                         (Control.Monad.Trans.Reader.runReaderT
                            @ r
                            @ *
                            @ (Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                            @ a
                            m1
                            r1)
                           `cast`
                         (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                              <GHC.Types.IO>_R
                              <a>_N)
                         (\ (a1 :: Data.Either.Either
                                     Servant.Server.Internal.ServantErr.ServantErr a)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case a1 of wild {
                            Data.Either.Left e1
                            -> (GHC.Base.returnIO
                                  @ (Data.Either.Either
                                       Servant.Server.Internal.ServantErr.ServantErr b)
                                  (Data.Either.Left
                                     @ Servant.Server.Internal.ServantErr.ServantErr
                                     @ b
                                     e1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.Either.Either
                                       Servant.Server.Internal.ServantErr.ServantErr b>_R)
                                 eta
                            Data.Either.Right x
                            -> (Control.Monad.Trans.Reader.runReaderT
                                  @ r
                                  @ *
                                  @ (Control.Monad.Trans.Except.ExceptT
                                       Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                                  @ b
                                  k
                                  r1)
                                 `cast`
                               (Trans
                                    (Control.Monad.Trans.Except.N:ExceptT[0]
                                         <Servant.Server.Internal.ServantErr.ServantErr>_N
                                         <GHC.Types.IO>_R
                                         <b>_N)
                                    (GHC.Types.N:IO[0]
                                         <Data.Either.Either
                                            Servant.Server.Internal.ServantErr.ServantErr b>_R))
                                 eta })
                           `cast`
                         (<Data.Either.Either
                             Servant.Server.Internal.ServantErr.ServantErr a>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <Data.Either.Either
                                           Servant.Server.Internal.ServantErr.ServantErr
                                           b>_R))))) -}
cd2f6f5ac6edfa93c2def9330c6fed43
  $fMonadApp_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
      a
    -> (a
        -> Control.Monad.Trans.Reader.ReaderT
             r
             (Control.Monad.Trans.Except.ExceptT
                Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
             b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.Except.ExceptT
                               Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                            a)
                   (k :: a
                         -> Control.Monad.Trans.Reader.ReaderT
                              r
                              (Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                              b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r
                      -> Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r
                        (Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                        b)
                   (\ (tpl :: r
                              -> Control.Monad.Trans.Except.ExceptT
                                   Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b) ->
                    tpl)
                     `cast`
                   (<r
                     -> Control.Monad.Trans.Except.ExceptT
                          Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <r>_R
                                  <Control.Monad.Trans.Except.ExceptT
                                     Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                  <b>_N))
                   (\ (r1 :: r) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Types.IO
                           (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr b))
                      @ (Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b)
                      (\ (tpl :: GHC.Types.IO
                                   (Data.Either.Either
                                      Servant.Server.Internal.ServantErr.ServantErr b)) ->
                       tpl)
                        `cast`
                      (<GHC.Types.IO
                          (Data.Either.Either
                             Servant.Server.Internal.ServantErr.ServantErr b)>_R
                       ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                     <Servant.Server.Internal.ServantErr.ServantErr>_N
                                     <GHC.Types.IO>_R
                                     <b>_N))
                      (GHC.Base.bindIO
                         @ (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr a)
                         @ (Data.Either.Either
                              Servant.Server.Internal.ServantErr.ServantErr b)
                         (Control.Monad.Trans.Reader.runReaderT
                            @ r
                            @ *
                            @ (Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                            @ a
                            m1
                            r1)
                           `cast`
                         (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                              <GHC.Types.IO>_R
                              <a>_N)
                         (\ (a1 :: Data.Either.Either
                                     Servant.Server.Internal.ServantErr.ServantErr a)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case a1 of wild {
                            Data.Either.Left e1
                            -> (GHC.Base.returnIO
                                  @ (Data.Either.Either
                                       Servant.Server.Internal.ServantErr.ServantErr b)
                                  (Data.Either.Left
                                     @ Servant.Server.Internal.ServantErr.ServantErr
                                     @ b
                                     e1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.Either.Either
                                       Servant.Server.Internal.ServantErr.ServantErr b>_R)
                                 eta
                            Data.Either.Right x
                            -> (Control.Monad.Trans.Reader.runReaderT
                                  @ r
                                  @ *
                                  @ (Control.Monad.Trans.Except.ExceptT
                                       Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                                  @ b
                                  (k x)
                                  r1)
                                 `cast`
                               (Trans
                                    (Control.Monad.Trans.Except.N:ExceptT[0]
                                         <Servant.Server.Internal.ServantErr.ServantErr>_N
                                         <GHC.Types.IO>_R
                                         <b>_N)
                                    (GHC.Types.N:IO[0]
                                         <Data.Either.Either
                                            Servant.Server.Internal.ServantErr.ServantErr b>_R))
                                 eta })
                           `cast`
                         (<Data.Either.Either
                             Servant.Server.Internal.ServantErr.ServantErr a>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <Data.Either.Either
                                           Servant.Server.Internal.ServantErr.ServantErr
                                           b>_R))))) -}
fa7fd8ba764cc49d3a804da1d8480a52
  $fMonadApp_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         a
  {- Arity: 3, Strictness: <B,U><B,A><B,U>x,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   eta :: GHC.Types.IO
                            (Data.Either.Either
                               Servant.Server.Internal.ServantErr.ServantErr a)
                   = GHC.Base.$fMonadIO_$cfail
                       @ (Data.Either.Either
                            Servant.Server.Internal.ServantErr.ServantErr a)
                       msg
                 } in
                 (\ (eta1 :: r) ->
                  GHC.Base.const
                    @ (Control.Monad.Trans.Except.ExceptT
                         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO a)
                    @ r
                    eta
                      `cast`
                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                              <GHC.Types.IO>_R
                              <a>_N))
                    eta1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <r>_R
                           <Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                           <a>_N))) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fMonadErrorApp ::
    Control.Monad.Error.Class.MonadError
      Servant.Server.Internal.ServantErr.ServantErr Service.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Servant.Server.Internal.ServantErr.ServantErr
                  @ Service.App
                  Service.$fMonadApp
                  Service.$fMonadErrorApp_$cthrowError
                  Service.$fMonadErrorApp_$ccatchError -}
48b16777307ec7c5f57df70003ea5c3c
  $fMonadErrorApp1 ::
    Control.Monad.Trans.Reader.ReaderT
      (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
      (Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
      a
    -> (Servant.Server.Internal.ServantErr.ServantErr
        -> Control.Monad.Trans.Reader.ReaderT
             (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
             (Control.Monad.Trans.Except.ExceptT
                Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
             a)
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                             (Control.Monad.Trans.Except.ExceptT
                                Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                             a)
                   (eta1 :: Servant.Server.Internal.ServantErr.ServantErr
                            -> Control.Monad.Trans.Reader.ReaderT
                                 (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                                 (Control.Monad.Trans.Except.ExceptT
                                    Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                                 a)
                   (eta2 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (eta
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                            <Control.Monad.Trans.Except.ExceptT
                               Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                            <a>_N)
                         eta2)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Servant.Server.Internal.ServantErr.ServantErr>_N
                                <GHC.Types.IO>_R
                                <a>_N)
                           (GHC.Types.N:IO[0]
                                <Data.Either.Either
                                   Servant.Server.Internal.ServantErr.ServantErr a>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left l
                   -> ((eta1 l)
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                            <Control.Monad.Trans.Except.ExceptT
                               Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                            <a>_N)
                         eta2)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Servant.Server.Internal.ServantErr.ServantErr>_N
                                <GHC.Types.IO>_R
                                <a>_N)
                           (GHC.Types.N:IO[0]
                                <Data.Either.Either
                                   Servant.Server.Internal.ServantErr.ServantErr a>_R))
                        ipv
                   Data.Either.Right r
                   -> (# ipv,
                         Data.Either.Right
                           @ Servant.Server.Internal.ServantErr.ServantErr
                           @ a
                           r #) } }) -}
9bfb3b13fd05c0c8c9efc02114e3daaf
  $fMonadErrorApp2 ::
    Servant.Server.Internal.ServantErr.ServantErr
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: Servant.Server.Internal.ServantErr.ServantErr)
                   (eta1 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta2,
                    Data.Either.Left
                      @ Servant.Server.Internal.ServantErr.ServantErr
                      @ a
                      eta #)) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fMonadErrorApp_$ccatchError ::
    Service.App a
    -> (Servant.Server.Internal.ServantErr.ServantErr -> Service.App a)
    -> Service.App a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fMonadErrorApp1
                  `cast`
                (forall (a :: <*>_N).
                 Sym (Service.N:App[0]) <a>_N
                 ->_R (<Servant.Server.Internal.ServantErr.ServantErr>_R
                       ->_R Sym (Service.N:App[0]) <a>_N)
                 ->_R Trans
                          (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                                              <GHC.Types.IO>_R
                                              <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Data.Pool.Pool
                                            Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Service.N:App[0]) <a>_N))) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fMonadErrorApp_$cthrowError ::
    Servant.Server.Internal.ServantErr.ServantErr -> Service.App a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fMonadErrorApp2
                  `cast`
                (forall (a :: <*>_N).
                 <Servant.Server.Internal.ServantErr.ServantErr>_R
                 ->_R Trans
                          (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                                              <GHC.Types.IO>_R
                                              <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Data.Pool.Pool
                                            Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Service.N:App[0]) <a>_N))) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fMonadIOApp :: Control.Monad.IO.Class.MonadIO Service.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Service.App Service.$fMonadApp Service.$fMonadIOApp_$cliftIO -}
3ef82d09428bb29911d90811f476f3da
  $fMonadIOApp1 ::
    GHC.Types.IO a
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,A><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: GHC.Types.IO a)
                   (eta1 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case eta `cast` (GHC.Types.N:IO[0] <a>_R)
                        eta2 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ Servant.Server.Internal.ServantErr.ServantErr
                      @ a
                      ipv1 #) }) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fMonadIOApp_$cliftIO :: GHC.Types.IO a -> Service.App a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fMonadIOApp1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Types.IO a>_R
                 ->_R Trans
                          (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                                              <GHC.Types.IO>_R
                                              <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Data.Pool.Pool
                                            Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Service.N:App[0]) <a>_N))) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fMonadReaderApp ::
    Control.Monad.Reader.Class.MonadReader
      Database.Persist.Sql.Types.ConnectionPool Service.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Persist.Sql.Types.ConnectionPool
                  @ Service.App
                  Service.$fMonadApp
                  Service.$fMonadReaderApp_$cask
                  Service.$fMonadReaderApp_$clocal
                  Service.$fMonadReaderApp_$creader -}
a23a6cc5b86ea1d7bc4864e2949123b7
  $fMonadReaderApp1 ::
    (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
     -> a)
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: Data.Pool.Pool
                             Database.Persist.Sql.Types.Internal.SqlBackend
                           -> a)
                   (eta1 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s,
                    Data.Either.Right
                      @ Servant.Server.Internal.ServantErr.ServantErr
                      @ a
                      (eta eta1) #)) -}
219ef2a87ec488a3942ec9574d52bc61
  $fMonadReaderApp2 ::
    (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
     -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
    -> Control.Monad.Trans.Reader.ReaderT
         (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         a
    -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: Data.Pool.Pool
                             Database.Persist.Sql.Types.Internal.SqlBackend
                           -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                              (Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                              a)
                   (eta2 :: Data.Pool.Pool
                              Database.Persist.Sql.Types.Internal.SqlBackend) ->
                 eta1
                   `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N
                      <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                      <Control.Monad.Trans.Except.ExceptT
                         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                      <a>_N)
                   (eta eta2)) -}
d44ef178c5846c5f328fc2218d9f5989
  $fMonadReaderApp3 ::
    Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr
            (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Pool.Pool
                             Database.Persist.Sql.Types.Internal.SqlBackend)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s,
                    Data.Either.Right
                      @ Servant.Server.Internal.ServantErr.ServantErr
                      @ (Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend)
                      eta #)) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fMonadReaderApp_$cask ::
    Service.App Database.Persist.Sql.Types.ConnectionPool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fMonadReaderApp3
                  `cast`
                (Trans
                     (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                      ->_R Trans
                               (Sym (GHC.Types.N:IO[0]
                                         <Data.Either.Either
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            (Data.Pool.Pool
                                               Database.Persist.Sql.Types.Internal.SqlBackend)>_R))
                               (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                         <Servant.Server.Internal.ServantErr.ServantErr>_N
                                         <GHC.Types.IO>_R
                                         <Data.Pool.Pool
                                            Database.Persist.Sql.Types.Internal.SqlBackend>_N)))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Data.Pool.Pool
                                       Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                    <Control.Monad.Trans.Except.ExceptT
                                       Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                    <Data.Pool.Pool
                                       Database.Persist.Sql.Types.Internal.SqlBackend>_N))
                          (Sym (Service.N:App[0]) <Database.Persist.Sql.Types.ConnectionPool>_N))) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fMonadReaderApp_$clocal ::
    (Database.Persist.Sql.Types.ConnectionPool
     -> Database.Persist.Sql.Types.ConnectionPool)
    -> Service.App a -> Service.App a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fMonadReaderApp2
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
                  -> Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                 ->_R Sym (Service.N:App[0]) <a>_N
                 ->_R Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Data.Pool.Pool
                                       Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                    <Control.Monad.Trans.Except.ExceptT
                                       Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                    <a>_N))
                          (Sym (Service.N:App[0]) <a>_N)) -}
994b784d54577b0ed4c3fe93fed4d5b5
  $fMonadReaderApp_$creader ::
    (Database.Persist.Sql.Types.ConnectionPool -> a) -> Service.App a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Service.$fMonadReaderApp1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend
                  -> a>_R
                 ->_R Trans
                          (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                                              <GHC.Types.IO>_R
                                              <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Data.Pool.Pool
                                            Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Service.N:App[0]) <a>_N))) -}
b4bcfeab841be01aec724f7fddb5d990
  $s$WUserEmail2 :: [GHC.Types.Char] GHC.Types.~~ [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   @~ <[GHC.Types.Char]>_N) -}
7139178ebda66be21d4892efd589cc77
  $s$fAllCTRender:a ::
    Servant.API.ContentTypes.AllCTRender
      '[Servant.API.ContentTypes.JSON] AuthApi.ResponseToken
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.API.ContentTypes.JSON]
                  @ AuthApi.ResponseToken
                  (Servant.API.ContentTypes.$fAllCTRender:a_$cp1AllCTRender
                     @ Servant.API.ContentTypes.JSON
                     @ '[]
                     @ AuthApi.ResponseToken
                     Servant.API.ContentTypes.$fAcceptTYPEJSON_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Servant.API.ContentTypes.JSON>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Service.$s$fAllCTRender:a1)
                  (Servant.API.ContentTypes.$fAllCTRender:a_$chandleAcceptH
                     @ Servant.API.ContentTypes.JSON
                     @ '[]
                     @ AuthApi.ResponseToken
                     Servant.API.ContentTypes.$fAcceptTYPEJSON_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Servant.API.ContentTypes.JSON>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Service.$s$fAllCTRender:a1) -}
df831b9136833f134b5fbc1a5335b1c9
  $s$fAllCTRender:a1 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Servant.API.ContentTypes.JSON] AuthApi.ResponseToken
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Service.$s$fAllCTRender:a_$s$fAllMimeRender:a0 -}
9adafdc4d219eb2b701ca3dcfb9f8aa7
  $s$fAllCTRender:a2 ::
    Data.Proxy.Proxy '[Servant.API.ContentTypes.JSON]
    -> AuthApi.ResponseToken
    -> [(Network.HTTP.Media.MediaType.Internal.MediaType,
         Data.ByteString.Lazy.Internal.ByteString)]
  {- Arity: 2, Strictness: <L,A><L,1*U(1*U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Proxy.Proxy '[Servant.API.ContentTypes.JSON])
                   (eta1 :: AuthApi.ResponseToken) ->
                 GHC.Types.:
                   @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                      Data.ByteString.Lazy.Internal.ByteString)
                   (Servant.API.ContentTypes.$fAcceptTYPEJSON1,
                    Data.ByteString.Builder.toLazyByteString
                      (Data.Aeson.Encode.Builder.encodeToBuilder
                         (AuthApi.$fToJSONResponseToken1 eta1)
                           `cast`
                         (Data.Aeson.Types.Generic.N:Tagged[0]
                              <Data.Aeson.Types.Generic.True>_P
                              <Data.Aeson.Types.Internal.Value>_R)))
                   (GHC.Types.[]
                      @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                         Data.ByteString.Lazy.Internal.ByteString))) -}
4904d5a38c370af3d1744bdd29d2aa12
  $s$fAllCTRender:a3 ::
    Servant.API.ContentTypes.MimeRender
      Servant.API.ContentTypes.JSON AuthApi.ResponseToken
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Service.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa -}
d209f1b57f8f5e8a29960b0d103419ac
  $s$fAllCTRender:a4 ::
    Servant.API.ContentTypes.AllCTRender
      '[Servant.API.ContentTypes.JSON] AuthApi.ResponseData
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.API.ContentTypes.JSON]
                  @ AuthApi.ResponseData
                  (Servant.API.ContentTypes.$fAllCTRender:a_$cp1AllCTRender
                     @ Servant.API.ContentTypes.JSON
                     @ '[]
                     @ AuthApi.ResponseData
                     Servant.API.ContentTypes.$fAcceptTYPEJSON_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Servant.API.ContentTypes.JSON>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Service.$s$fAllCTRender:a5)
                  (Servant.API.ContentTypes.$fAllCTRender:a_$chandleAcceptH
                     @ Servant.API.ContentTypes.JSON
                     @ '[]
                     @ AuthApi.ResponseData
                     Servant.API.ContentTypes.$fAcceptTYPEJSON_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Servant.API.ContentTypes.JSON>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Service.$s$fAllCTRender:a5) -}
2d79b8fa720abf64b8eed6209aa7d9d1
  $s$fAllCTRender:a5 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Servant.API.ContentTypes.JSON] AuthApi.ResponseData
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Service.$s$fAllCTRender:a_$s$fAllMimeRender:a1 -}
6add81d2c893b7f25e96c6f0606f3d8f
  $s$fAllCTRender:a6 ::
    Data.Proxy.Proxy '[Servant.API.ContentTypes.JSON]
    -> AuthApi.ResponseData
    -> [(Network.HTTP.Media.MediaType.Internal.MediaType,
         Data.ByteString.Lazy.Internal.ByteString)]
  {- Arity: 2, Strictness: <L,A><L,1*U(1*U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Proxy.Proxy '[Servant.API.ContentTypes.JSON])
                   (eta1 :: AuthApi.ResponseData) ->
                 GHC.Types.:
                   @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                      Data.ByteString.Lazy.Internal.ByteString)
                   (Servant.API.ContentTypes.$fAcceptTYPEJSON1,
                    Data.ByteString.Builder.toLazyByteString
                      (Data.Aeson.Encode.Builder.encodeToBuilder
                         (AuthApi.$fToJSONResponseData1 eta1)
                           `cast`
                         (Data.Aeson.Types.Generic.N:Tagged[0]
                              <Data.Aeson.Types.Generic.True>_P
                              <Data.Aeson.Types.Internal.Value>_R)))
                   (GHC.Types.[]
                      @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                         Data.ByteString.Lazy.Internal.ByteString))) -}
038299a8c6a5a8974c7b5072818fdee1
  $s$fAllCTRender:a7 ::
    Servant.API.ContentTypes.MimeRender
      Servant.API.ContentTypes.JSON AuthApi.ResponseData
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Service.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa1 -}
79cb93f96a760c29ad5b1116e555215f
  $s$fAllCTRender:a_$s$fAllMimeRender:a0 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Servant.API.ContentTypes.JSON] AuthApi.ResponseToken
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.API.ContentTypes.JSON]
                  @ AuthApi.ResponseToken
                  (Servant.API.ContentTypes.$fAllMimeRender:a0_$cp1AllMimeRender
                     @ Servant.API.ContentTypes.JSON
                     @ AuthApi.ResponseToken
                     Service.$s$fAllCTRender:a3)
                  Service.$s$fAllCTRender:a2 -}
32f123e8fced70f8a76ffe8cf5c96b84
  $s$fAllCTRender:a_$s$fAllMimeRender:a1 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Servant.API.ContentTypes.JSON] AuthApi.ResponseData
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.API.ContentTypes.JSON]
                  @ AuthApi.ResponseData
                  (Servant.API.ContentTypes.$fAllMimeRender:a0_$cp1AllMimeRender
                     @ Servant.API.ContentTypes.JSON
                     @ AuthApi.ResponseData
                     Service.$s$fAllCTRender:a7)
                  Service.$s$fAllCTRender:a6 -}
511543051c7802f837aa4157db3e2a16
  $s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa ::
    Servant.API.ContentTypes.MimeRender
      Servant.API.ContentTypes.JSON AuthApi.ResponseToken
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ Servant.API.ContentTypes.JSON
                  @ AuthApi.ResponseToken
                  (Servant.API.ContentTypes.$fMimeRenderTYPEJSONa_$cp1MimeRender
                     @ AuthApi.ResponseToken
                     AuthApi.$fToJSONResponseToken)
                  Service.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender -}
9be94cb27436288a67c6c8fccd8bef7d
  $s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa1 ::
    Servant.API.ContentTypes.MimeRender
      Servant.API.ContentTypes.JSON AuthApi.ResponseData
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ Servant.API.ContentTypes.JSON
                  @ AuthApi.ResponseData
                  (Servant.API.ContentTypes.$fMimeRenderTYPEJSONa_$cp1MimeRender
                     @ AuthApi.ResponseData
                     AuthApi.$fToJSONResponseData)
                  Service.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender1 -}
fa0717a123badc2c5044012943c96ace
  $s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender ::
    Data.Proxy.Proxy Servant.API.ContentTypes.JSON
    -> AuthApi.ResponseToken
    -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,A><L,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Proxy.Proxy Servant.API.ContentTypes.JSON)
                   (eta :: AuthApi.ResponseToken) ->
                 Data.ByteString.Builder.toLazyByteString
                   (Data.Aeson.Types.Internal.fromEncoding
                      (Data.Aeson.Encode.Builder.encodeToBuilder
                         (AuthApi.$fToJSONResponseToken_$ctoJSON eta))
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Encoding[0])))) -}
3ad89c389aeb23a669b1ef0992d1480b
  $s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender1 ::
    Data.Proxy.Proxy Servant.API.ContentTypes.JSON
    -> AuthApi.ResponseData -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,A><L,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Proxy.Proxy Servant.API.ContentTypes.JSON)
                   (eta :: AuthApi.ResponseData) ->
                 Data.ByteString.Builder.toLazyByteString
                   (Data.Aeson.Types.Internal.fromEncoding
                      (Data.Aeson.Encode.Builder.encodeToBuilder
                         (AuthApi.$fToJSONResponseData_$ctoJSON eta))
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Encoding[0])))) -}
71d71848caf70eccec2061dce33fd026
  $s$fAllMimeUnrender:a ::
    Servant.API.ContentTypes.AllMimeUnrender
      '[Servant.API.ContentTypes.JSON] Models.User
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.API.ContentTypes.JSON]
                  @ Models.User
                  (Servant.API.ContentTypes.$fAllMimeUnrender:a_$cp1AllMimeUnrender
                     @ Servant.API.ContentTypes.JSON
                     @ Models.User
                     @ '[]
                     Service.$s$fAllMimeUnrender:a1
                     (Servant.API.ContentTypes.$fAllMimeUnrender[]a @ Models.User))
                  (Servant.API.ContentTypes.$fAllMimeUnrender:a_$callMimeUnrender
                     @ Servant.API.ContentTypes.JSON
                     @ Models.User
                     @ '[]
                     Service.$s$fAllMimeUnrender:a1
                     (Servant.API.ContentTypes.$fAllMimeUnrender[]a @ Models.User)) -}
0be0866d78af29567e4572c800f7f42e
  $s$fAllMimeUnrender:a1 ::
    Servant.API.ContentTypes.MimeUnrender
      Servant.API.ContentTypes.JSON Models.User
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Service.$s$fAllMimeUnrender:a_$s$fMimeUnrenderTYPEJSONa -}
951addafb47685982f8017c3e6c0106f
  $s$fAllMimeUnrender:a_$s$fMimeUnrenderTYPEJSONa ::
    Servant.API.ContentTypes.MimeUnrender
      Servant.API.ContentTypes.JSON Models.User
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ Servant.API.ContentTypes.JSON
                  @ Models.User
                  (Servant.API.ContentTypes.$fMimeUnrenderTYPEJSONa_$cp1MimeUnrender
                     @ Models.User
                     Models.$fFromJSONEntity_$cparseJSON1
                       `cast`
                     (Sym (Data.Aeson.Types.Class.N:FromJSON[0] <Models.User>_N)))
                  Service.$s$fAllMimeUnrender:a_$s$fMimeUnrenderTYPEJSONa_$cmimeUnrender -}
b9f9e731e463e66c59f0471bfa0339ae
  $s$fAllMimeUnrender:a_$s$fMimeUnrenderTYPEJSONa_$cmimeUnrender ::
    Data.Proxy.Proxy Servant.API.ContentTypes.JSON
    -> Data.ByteString.Lazy.Internal.ByteString
    -> Data.Either.Either GHC.Base.String Models.User
  {- Arity: 2, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Data.Proxy.Proxy Servant.API.ContentTypes.JSON)
                   (eta :: Data.ByteString.Lazy.Internal.ByteString) ->
                 Servant.API.ContentTypes.eitherDecodeLenient
                   @ Models.User
                   Models.$fFromJSONEntity_$cparseJSON1
                     `cast`
                   (Sym (Data.Aeson.Types.Class.N:FromJSON[0] <Models.User>_N))
                   eta) -}
579193eb482f998ba06ba83c4c61487f
  $sserve10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "users"#) -}
b9e9d0aeb2a5d5a7ff3e2a0d72928412
  $sserve2 ::
    Data.Proxy.Proxy
      (("users"
        Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                              '[Servant.API.ContentTypes.JSON] Models.User
                            Servant.API.Sub.:> Servant.API.Verbs.Post
                                                 '[Servant.API.ContentTypes.JSON]
                                                 AuthApi.ResponseData))
       Servant.API.Alternative.:<|> ("verify"
                                     Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                           '[Servant.API.ContentTypes.JSON]
                                                           Models.User
                                                         Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                              '[Servant.API.ContentTypes.JSON]
                                                                              AuthApi.ResponseToken)))
    -> Servant.Server.Internal.Context.Context '[]
    -> Servant.Server.Internal.RoutingApplication.Delayed
         env
         (Servant.Server.Internal.Server
            (("users"
              Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                    '[Servant.API.ContentTypes.JSON] Models.User
                                  Servant.API.Sub.:> Servant.API.Verbs.Post
                                                       '[Servant.API.ContentTypes.JSON]
                                                       AuthApi.ResponseData))
             Servant.API.Alternative.:<|> ("verify"
                                           Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                 '[Servant.API.ContentTypes.JSON]
                                                                 Models.User
                                                               Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                    '[Servant.API.ContentTypes.JSON]
                                                                                    AuthApi.ResponseToken))))
    -> Servant.Server.Internal.Router.Router'
         env Servant.Server.Internal.RoutingApplication.RoutingApplication
  {- Arity: 3, Strictness: <S,1*H><L,U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ env
                   (w :: Data.Proxy.Proxy
                           (("users"
                             Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                   '[Servant.API.ContentTypes.JSON] Models.User
                                                 Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                      '[Servant.API.ContentTypes.JSON]
                                                                      AuthApi.ResponseData))
                            Servant.API.Alternative.:<|> ("verify"
                                                          Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                                '[Servant.API.ContentTypes.JSON]
                                                                                Models.User
                                                                              Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                   '[Servant.API.ContentTypes.JSON]
                                                                                                   AuthApi.ResponseToken))))
                   (w1 :: Servant.Server.Internal.Context.Context '[])
                   (w2 :: Servant.Server.Internal.RoutingApplication.Delayed
                            env
                            (Servant.Server.Internal.Server
                               (("users"
                                 Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                       '[Servant.API.ContentTypes.JSON] Models.User
                                                     Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                          '[Servant.API.ContentTypes.JSON]
                                                                          AuthApi.ResponseData))
                                Servant.API.Alternative.:<|> ("verify"
                                                              Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                                    '[Servant.API.ContentTypes.JSON]
                                                                                    Models.User
                                                                                  Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                       '[Servant.API.ContentTypes.JSON]
                                                                                                       AuthApi.ResponseToken))))) ->
                 case w of w3 { Data.Proxy.Proxy ->
                 Service.$w$dHasServer
                   @ env
                   (Data.Proxy.Proxy
                      @ *
                      @ (("users"
                          Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                '[Servant.API.ContentTypes.JSON] Models.User
                                              Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                   '[Servant.API.ContentTypes.JSON]
                                                                   AuthApi.ResponseData))
                         Servant.API.Alternative.:<|> ("verify"
                                                       Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                             '[Servant.API.ContentTypes.JSON]
                                                                             Models.User
                                                                           Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                '[Servant.API.ContentTypes.JSON]
                                                                                                AuthApi.ResponseToken))))
                   w1
                   w2 }) -}
49b2574fc44bda8cb15c874a5e8da2af
  $sserve3 ::
    Data.Proxy.Proxy
      (Servant.API.Verbs.Verb
         'Network.HTTP.Types.Method.POST
         200
         '[Servant.API.ContentTypes.JSON]
         AuthApi.ResponseToken)
    -> Servant.Server.Internal.Context.Context '[]
    -> Servant.Server.Internal.RoutingApplication.Delayed
         env
         (Servant.Server.Internal.Server
            (Servant.API.Verbs.Verb
               'Network.HTTP.Types.Method.POST
               200
               '[Servant.API.ContentTypes.JSON]
               AuthApi.ResponseToken))
    -> Servant.Server.Internal.Router.Router env
  {- Arity: 2, Strictness: <S,1*H><L,A>,
     Unfolding: InlineRule (2, True, False)
                (\ @ env
                   (w3 :: Data.Proxy.Proxy
                            (Servant.API.Verbs.Verb
                               'Network.HTTP.Types.Method.POST
                               200
                               '[Servant.API.ContentTypes.JSON]
                               AuthApi.ResponseToken))
                   (w4 :: Servant.Server.Internal.Context.Context '[]) ->
                 case w3 of w5 { Data.Proxy.Proxy ->
                 Servant.Server.Internal.$w$croute8
                   @ Network.HTTP.Types.Method.StdMethod
                   @ '[Servant.API.ContentTypes.JSON]
                   @ AuthApi.ResponseToken
                   @ 'Network.HTTP.Types.Method.POST
                   @ 200
                   @ '[]
                   Service.$s$fAllCTRender:a
                   Servant.API.Verbs.$fReflectMethodStdMethodPOST_$creflectMethod
                     `cast`
                   (Sym (Servant.API.Verbs.N:ReflectMethod[0]
                             <Network.HTTP.Types.Method.StdMethod>_N
                             <'Network.HTTP.Types.Method.POST>_N))
                   Service.$sserve4
                     `cast`
                   (Trans
                        (Sym (GHC.TypeLits.N:SNat[0] <200>_P))
                        (Sym (GHC.TypeLits.N:KnownNat[0]) <200>_N))
                   @ env
                   (Data.Proxy.Proxy
                      @ *
                      @ (Servant.API.Verbs.Verb
                           'Network.HTTP.Types.Method.POST
                           200
                           '[Servant.API.ContentTypes.JSON]
                           AuthApi.ResponseToken)) }) -}
4d66860287fa5add70d3d469d2a3517b
  $sserve4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (200) -}
72f384c8591f85c2e599487c15216e33
  $sserve5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Servant.Server.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Servant.Server.Internal.$fHasServerTYPE:>context20
                   Service.$sserve6
                   0#
                   ipv }) -}
72a94ce8cadfca9cff6a40300a15e76d
  $sserve6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "verify"#) -}
5246ce7fc45cedd08cc0946616770272
  $sserve7 ::
    Data.Proxy.Proxy
      (Servant.API.Verbs.Verb
         'Network.HTTP.Types.Method.POST
         200
         '[Servant.API.ContentTypes.JSON]
         AuthApi.ResponseData)
    -> Servant.Server.Internal.Context.Context '[]
    -> Servant.Server.Internal.RoutingApplication.Delayed
         env
         (Servant.Server.Internal.Server
            (Servant.API.Verbs.Verb
               'Network.HTTP.Types.Method.POST
               200
               '[Servant.API.ContentTypes.JSON]
               AuthApi.ResponseData))
    -> Servant.Server.Internal.Router.Router env
  {- Arity: 2, Strictness: <S,1*H><L,A>,
     Unfolding: InlineRule (2, True, False)
                (\ @ env
                   (w3 :: Data.Proxy.Proxy
                            (Servant.API.Verbs.Verb
                               'Network.HTTP.Types.Method.POST
                               200
                               '[Servant.API.ContentTypes.JSON]
                               AuthApi.ResponseData))
                   (w4 :: Servant.Server.Internal.Context.Context '[]) ->
                 case w3 of w5 { Data.Proxy.Proxy ->
                 Servant.Server.Internal.$w$croute8
                   @ Network.HTTP.Types.Method.StdMethod
                   @ '[Servant.API.ContentTypes.JSON]
                   @ AuthApi.ResponseData
                   @ 'Network.HTTP.Types.Method.POST
                   @ 200
                   @ '[]
                   Service.$s$fAllCTRender:a4
                   Servant.API.Verbs.$fReflectMethodStdMethodPOST_$creflectMethod
                     `cast`
                   (Sym (Servant.API.Verbs.N:ReflectMethod[0]
                             <Network.HTTP.Types.Method.StdMethod>_N
                             <'Network.HTTP.Types.Method.POST>_N))
                   Service.$sserve4
                     `cast`
                   (Trans
                        (Sym (GHC.TypeLits.N:SNat[0] <200>_P))
                        (Sym (GHC.TypeLits.N:KnownNat[0]) <200>_N))
                   @ env
                   (Data.Proxy.Proxy
                      @ *
                      @ (Servant.API.Verbs.Verb
                           'Network.HTTP.Types.Method.POST
                           200
                           '[Servant.API.ContentTypes.JSON]
                           AuthApi.ResponseData)) }) -}
8e940c939104407d6c91457d609139c8
  $sserve8 ::
    Data.Proxy.Proxy '[Servant.API.ContentTypes.JSON]
    -> Data.ByteString.Lazy.Internal.ByteString
    -> Data.ByteString.Lazy.Internal.ByteString
    -> GHC.Base.Maybe (Data.Either.Either GHC.Base.String Models.User)
  {- Arity: 3, Strictness: <L,A><L,1*U><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ (w1 :: Data.Proxy.Proxy '[Servant.API.ContentTypes.JSON])
                   (w2 :: Data.ByteString.Lazy.Internal.ByteString)
                   (w3 :: Data.ByteString.Lazy.Internal.ByteString) ->
                 Servant.API.ContentTypes.$w$chandleCTypeH
                   @ '[Servant.API.ContentTypes.JSON]
                   @ Models.User
                   Service.$s$fAllMimeUnrender:a
                   w2
                   w3) -}
a370be6faf55970432779ac5948a4140
  $sserve9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Servant.Server.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Servant.Server.Internal.$fHasServerTYPE:>context20
                   Service.$sserve10
                   0#
                   ipv }) -}
864bb23018032d1b8452a3dbe6d8f40a
  $tc'App :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4361649303172763818##
                   1319484693172386346##
                   Service.$trModule
                   Service.$tc'App1) -}
be9f19958a217eb7667a04bbbfa03a8e
  $tc'App1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'App"#) -}
6962c7d449ebac2d53decced8f69632c
  $tc'CipherKey :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18080235299457860862##
                   13928928348667631562##
                   Service.$trModule
                   Service.$tc'CipherKey1) -}
6564cdde0c8202b8826a5651d30b5b4f
  $tc'CipherKey1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CipherKey"#) -}
98324ded73ade0559d3c08b1e55c98e5
  $tcApp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4937355525580982325##
                   2183198839271653362##
                   Service.$trModule
                   Service.$tcApp1) -}
ced00d27f252afce5ac658fa2e4f3556
  $tcApp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "App"#) -}
88d0d1103ac8da8e68c174075230ccef
  $tcCipherKey :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1448439929064584571##
                   12705300573786051212##
                   Service.$trModule
                   Service.$tcCipherKey1) -}
6035e714bff87dec965fd26d6b2fe29b
  $tcCipherKey1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CipherKey"#) -}
b655a8829e140ba7ce3d911bcbdc51cd
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Service.$trModule2
                   Service.$trModule1) -}
6ceaede0a09f234df745286236c73f71
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Service"#) -}
14e099da0479866b601315f47b7ac81e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "auth-service-0.1.0.0-6hTD0XPn3Lw9fV9T7HNQU"#) -}
235342d8a63815b76ac0f36b073b68f8
  $w$dHasServer ::
    Data.Proxy.Proxy
      (("users"
        Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                              '[Servant.API.ContentTypes.JSON] Models.User
                            Servant.API.Sub.:> Servant.API.Verbs.Post
                                                 '[Servant.API.ContentTypes.JSON]
                                                 AuthApi.ResponseData))
       Servant.API.Alternative.:<|> ("verify"
                                     Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                           '[Servant.API.ContentTypes.JSON]
                                                           Models.User
                                                         Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                              '[Servant.API.ContentTypes.JSON]
                                                                              AuthApi.ResponseToken)))
    -> Servant.Server.Internal.Context.Context '[]
    -> Servant.Server.Internal.RoutingApplication.Delayed
         env
         (Servant.Server.Internal.Server
            (("users"
              Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                    '[Servant.API.ContentTypes.JSON] Models.User
                                  Servant.API.Sub.:> Servant.API.Verbs.Post
                                                       '[Servant.API.ContentTypes.JSON]
                                                       AuthApi.ResponseData))
             Servant.API.Alternative.:<|> ("verify"
                                           Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                 '[Servant.API.ContentTypes.JSON]
                                                                 Models.User
                                                               Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                    '[Servant.API.ContentTypes.JSON]
                                                                                    AuthApi.ResponseToken))))
    -> Servant.Server.Internal.Router.Router'
         env Servant.Server.Internal.RoutingApplication.RoutingApplication
  {- Arity: 3, Strictness: <S,1*H><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ env
                   (w :: Data.Proxy.Proxy
                           (("users"
                             Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                   '[Servant.API.ContentTypes.JSON] Models.User
                                                 Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                      '[Servant.API.ContentTypes.JSON]
                                                                      AuthApi.ResponseData))
                            Servant.API.Alternative.:<|> ("verify"
                                                          Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                                '[Servant.API.ContentTypes.JSON]
                                                                                Models.User
                                                                              Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                   '[Servant.API.ContentTypes.JSON]
                                                                                                   AuthApi.ResponseToken))))
                   (w1 :: Servant.Server.Internal.Context.Context '[])
                   (w2 :: Servant.Server.Internal.RoutingApplication.Delayed
                            env
                            (Servant.Server.Internal.Server
                               (("users"
                                 Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                       '[Servant.API.ContentTypes.JSON] Models.User
                                                     Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                          '[Servant.API.ContentTypes.JSON]
                                                                          AuthApi.ResponseData))
                                Servant.API.Alternative.:<|> ("verify"
                                                              Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                                    '[Servant.API.ContentTypes.JSON]
                                                                                    Models.User
                                                                                  Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                       '[Servant.API.ContentTypes.JSON]
                                                                                                       AuthApi.ResponseToken))))) ->
                 Servant.Server.Internal.Router.choice
                   @ env
                   @ Servant.Server.Internal.RoutingApplication.RoutingApplication
                   (Servant.Server.Internal.Router.StaticRouter
                      @ env
                      @ Servant.Server.Internal.RoutingApplication.RoutingApplication
                      (case GHC.Magic.runRW#
                              @ 'GHC.Types.PtrRepLifted
                              @ Data.Text.Internal.Text
                              Service.$sserve9 of ds1 { (#,#) ipv ipv1 ->
                       case ipv1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                       Data.Map.Base.Bin
                         @ Data.Text.Internal.Text
                         @ (Servant.Server.Internal.Router.Router'
                              env Servant.Server.Internal.RoutingApplication.RoutingApplication)
                         1#
                         dt
                         (Servant.Server.Internal.$w$croute2
                            @ *
                            @ '[Servant.API.ContentTypes.JSON]
                            @ Models.User
                            @ (Servant.API.Verbs.Verb
                                 'Network.HTTP.Types.Method.POST
                                 200
                                 '[Servant.API.ContentTypes.JSON]
                                 AuthApi.ResponseData)
                            @ '[]
                            Service.$sserve8
                              `cast`
                            (Sym (Servant.API.ContentTypes.N:AllCTUnrender[0]
                                      <'[Servant.API.ContentTypes.JSON]>_N <Models.User>_N))
                            Service.$sserve7
                              `cast`
                            (Sym (Servant.Server.Internal.N:HasServer[0]
                                      <*>_N
                                      <Servant.API.Verbs.Verb
                                         'Network.HTTP.Types.Method.POST
                                         200
                                         '[Servant.API.ContentTypes.JSON]
                                         AuthApi.ResponseData>_N
                                      <'[]>_N))
                            @ env
                            (Data.Proxy.Proxy
                               @ *
                               @ (Servant.API.ReqBody.ReqBody
                                    '[Servant.API.ContentTypes.JSON] Models.User
                                  Servant.API.Sub.:> Servant.API.Verbs.Verb
                                                       'Network.HTTP.Types.Method.POST
                                                       200
                                                       '[Servant.API.ContentTypes.JSON]
                                                       AuthApi.ResponseData))
                            w1
                            (Servant.Server.Internal.RoutingApplication.$fFunctorDelayed_$cfmap
                               @ env
                               @ (Servant.Server.Internal.Server
                                    ("users"
                                     Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                           '[Servant.API.ContentTypes.JSON]
                                                           Models.User
                                                         Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                              '[Servant.API.ContentTypes.JSON]
                                                                              AuthApi.ResponseData))
                                  Servant.API.Alternative.:<|> Servant.Server.Internal.ServerT
                                                                 ("verify"
                                                                  Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                                        '[Servant.API.ContentTypes.JSON]
                                                                                        Models.User
                                                                                      Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                           '[Servant.API.ContentTypes.JSON]
                                                                                                           AuthApi.ResponseToken))
                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                    Servant.Server.Internal.ServantErr.ServantErr
                                                                    GHC.Types.IO))
                               @ (Servant.Server.Internal.Server
                                    ("users"
                                     Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                           '[Servant.API.ContentTypes.JSON]
                                                           Models.User
                                                         Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                              '[Servant.API.ContentTypes.JSON]
                                                                              AuthApi.ResponseData)))
                               (Servant.Server.Internal.$fHasServerTYPE:<|>context2
                                  @ ("users"
                                     Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                           '[Servant.API.ContentTypes.JSON]
                                                           Models.User
                                                         Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                              '[Servant.API.ContentTypes.JSON]
                                                                              AuthApi.ResponseData))
                                  @ ("verify"
                                     Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                           '[Servant.API.ContentTypes.JSON]
                                                           Models.User
                                                         Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                              '[Servant.API.ContentTypes.JSON]
                                                                              AuthApi.ResponseToken)))
                               w2
                                 `cast`
                               (Servant.Server.Internal.RoutingApplication.Delayed
                                  <env>_R
                                  (Sub (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                            <"users"
                                             Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                   '[Servant.API.ContentTypes.JSON]
                                                                   Models.User
                                                                 Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                      '[Servant.API.ContentTypes.JSON]
                                                                                      AuthApi.ResponseData)>_N
                                            <"verify"
                                             Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                   '[Servant.API.ContentTypes.JSON]
                                                                   Models.User
                                                                 Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                      '[Servant.API.ContentTypes.JSON]
                                                                                      AuthApi.ResponseToken)>_N
                                            <Control.Monad.Trans.Except.ExceptT
                                               Servant.Server.Internal.ServantErr.ServantErr
                                               GHC.Types.IO>_N)))_R)
                              `cast`
                            (Servant.Server.Internal.RoutingApplication.Delayed
                               <env>_R
                               (Sub (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                         <*>_N
                                         <"users">_N
                                         <Servant.API.ReqBody.ReqBody
                                            '[Servant.API.ContentTypes.JSON] Models.User
                                          Servant.API.Sub.:> Servant.API.Verbs.Post
                                                               '[Servant.API.ContentTypes.JSON]
                                                               AuthApi.ResponseData>_N
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_N)))_R)
                         (Data.Map.Base.Tip
                            @ Data.Text.Internal.Text
                            @ (Servant.Server.Internal.Router.Router'
                                 env Servant.Server.Internal.RoutingApplication.RoutingApplication))
                         (Data.Map.Base.Tip
                            @ Data.Text.Internal.Text
                            @ (Servant.Server.Internal.Router.Router'
                                 env
                                 Servant.Server.Internal.RoutingApplication.RoutingApplication)) } })
                      (GHC.Types.[]
                         @ (env
                            -> Servant.Server.Internal.RoutingApplication.RoutingApplication)))
                   (Servant.Server.Internal.Router.StaticRouter
                      @ env
                      @ Servant.Server.Internal.RoutingApplication.RoutingApplication
                      (case GHC.Magic.runRW#
                              @ 'GHC.Types.PtrRepLifted
                              @ Data.Text.Internal.Text
                              Service.$sserve5 of ds1 { (#,#) ipv ipv1 ->
                       case ipv1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                       Data.Map.Base.Bin
                         @ Data.Text.Internal.Text
                         @ (Servant.Server.Internal.Router.Router'
                              env Servant.Server.Internal.RoutingApplication.RoutingApplication)
                         1#
                         dt
                         (Servant.Server.Internal.$w$croute2
                            @ *
                            @ '[Servant.API.ContentTypes.JSON]
                            @ Models.User
                            @ (Servant.API.Verbs.Verb
                                 'Network.HTTP.Types.Method.POST
                                 200
                                 '[Servant.API.ContentTypes.JSON]
                                 AuthApi.ResponseToken)
                            @ '[]
                            Service.$sserve8
                              `cast`
                            (Sym (Servant.API.ContentTypes.N:AllCTUnrender[0]
                                      <'[Servant.API.ContentTypes.JSON]>_N <Models.User>_N))
                            Service.$sserve3
                              `cast`
                            (Sym (Servant.Server.Internal.N:HasServer[0]
                                      <*>_N
                                      <Servant.API.Verbs.Verb
                                         'Network.HTTP.Types.Method.POST
                                         200
                                         '[Servant.API.ContentTypes.JSON]
                                         AuthApi.ResponseToken>_N
                                      <'[]>_N))
                            @ env
                            (Data.Proxy.Proxy
                               @ *
                               @ (Servant.API.ReqBody.ReqBody
                                    '[Servant.API.ContentTypes.JSON] Models.User
                                  Servant.API.Sub.:> Servant.API.Verbs.Verb
                                                       'Network.HTTP.Types.Method.POST
                                                       200
                                                       '[Servant.API.ContentTypes.JSON]
                                                       AuthApi.ResponseToken))
                            w1
                            (Servant.Server.Internal.RoutingApplication.$fFunctorDelayed_$cfmap
                               @ env
                               @ (Servant.Server.Internal.ServerT
                                    ("users"
                                     Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                           '[Servant.API.ContentTypes.JSON]
                                                           Models.User
                                                         Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                              '[Servant.API.ContentTypes.JSON]
                                                                              AuthApi.ResponseData))
                                    (Control.Monad.Trans.Except.ExceptT
                                       Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                                  Servant.API.Alternative.:<|> Servant.Server.Internal.Server
                                                                 ("verify"
                                                                  Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                                        '[Servant.API.ContentTypes.JSON]
                                                                                        Models.User
                                                                                      Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                           '[Servant.API.ContentTypes.JSON]
                                                                                                           AuthApi.ResponseToken)))
                               @ (Servant.Server.Internal.Server
                                    ("verify"
                                     Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                           '[Servant.API.ContentTypes.JSON]
                                                           Models.User
                                                         Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                              '[Servant.API.ContentTypes.JSON]
                                                                              AuthApi.ResponseToken)))
                               (Servant.Server.Internal.$fHasServerTYPE:<|>context1
                                  @ ("users"
                                     Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                           '[Servant.API.ContentTypes.JSON]
                                                           Models.User
                                                         Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                              '[Servant.API.ContentTypes.JSON]
                                                                              AuthApi.ResponseData))
                                  @ ("verify"
                                     Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                           '[Servant.API.ContentTypes.JSON]
                                                           Models.User
                                                         Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                              '[Servant.API.ContentTypes.JSON]
                                                                              AuthApi.ResponseToken)))
                               w2
                                 `cast`
                               (Servant.Server.Internal.RoutingApplication.Delayed
                                  <env>_R
                                  (Sub (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                            <"users"
                                             Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                   '[Servant.API.ContentTypes.JSON]
                                                                   Models.User
                                                                 Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                      '[Servant.API.ContentTypes.JSON]
                                                                                      AuthApi.ResponseData)>_N
                                            <"verify"
                                             Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                   '[Servant.API.ContentTypes.JSON]
                                                                   Models.User
                                                                 Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                      '[Servant.API.ContentTypes.JSON]
                                                                                      AuthApi.ResponseToken)>_N
                                            <Control.Monad.Trans.Except.ExceptT
                                               Servant.Server.Internal.ServantErr.ServantErr
                                               GHC.Types.IO>_N)))_R)
                              `cast`
                            (Servant.Server.Internal.RoutingApplication.Delayed
                               <env>_R
                               (Sub (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                         <*>_N
                                         <"verify">_N
                                         <Servant.API.ReqBody.ReqBody
                                            '[Servant.API.ContentTypes.JSON] Models.User
                                          Servant.API.Sub.:> Servant.API.Verbs.Post
                                                               '[Servant.API.ContentTypes.JSON]
                                                               AuthApi.ResponseToken>_N
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_N)))_R)
                         (Data.Map.Base.Tip
                            @ Data.Text.Internal.Text
                            @ (Servant.Server.Internal.Router.Router'
                                 env Servant.Server.Internal.RoutingApplication.RoutingApplication))
                         (Data.Map.Base.Tip
                            @ Data.Text.Internal.Text
                            @ (Servant.Server.Internal.Router.Router'
                                 env
                                 Servant.Server.Internal.RoutingApplication.RoutingApplication)) } })
                      (GHC.Types.[]
                         @ (env
                            -> Servant.Server.Internal.RoutingApplication.RoutingApplication)))) -}
6517b1bdd8e3d0221dc1588ffb0e0608
  $wverify :: GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String) (w :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char ww 0# of ww2 { DEFAULT ->
                 case Data.ByteString.Internal.$wunsafePackLenChars
                        ww2
                        ww of ww1 { Data.ByteString.Internal.PS ww3 ww4 ww5 ww6 ->
                 Crypto.PasswordStore.$wverifyPasswordWith
                   Crypto.PasswordStore.pbkdf1
                   Crypto.PasswordStore.verifyPassword1
                   (Data.ByteString.Internal.packChars w)
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
994b784d54577b0ed4c3fe93fed4d5b5
  type role App nominal
  newtype App a
    = App {runApp :: Control.Monad.Trans.Reader.ReaderT
                       Database.Persist.Sql.Types.ConnectionPool
                       (Control.Monad.Trans.Except.ExceptT
                          Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
                       a}
6aaa77ff1de38966b8252fc8f56ad491
  type role CipherKey phantom
  data CipherKey k = CipherKey GHC.Base.String
fa8fbec76eed9ea06b8dd36753cf587c
  app ::
    Database.Persist.Sql.Types.ConnectionPool
    -> Network.Wai.Application
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (cp :: Database.Persist.Sql.Types.ConnectionPool) ->
                 Servant.Server.serveWithContext
                   @ AuthApi.AuthServiceApi
                   @ '[]
                   Service.$sserve2
                     `cast`
                   (Sym (Servant.Server.Internal.N:HasServer[0]
                             <*>_N
                             <("users"
                               Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                     '[Servant.API.ContentTypes.JSON] Models.User
                                                   Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                        '[Servant.API.ContentTypes.JSON]
                                                                        AuthApi.ResponseData))
                              Servant.API.Alternative.:<|> ("verify"
                                                            Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                                  '[Servant.API.ContentTypes.JSON]
                                                                                  Models.User
                                                                                Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                     '[Servant.API.ContentTypes.JSON]
                                                                                                     AuthApi.ResponseToken))>_N
                             <'[]>_N))
                   (Data.Proxy.Proxy @ * @ AuthApi.AuthServiceApi)
                   Servant.Server.Internal.Context.$WEmptyContext
                   (Servant.API.Alternative.:<|>
                      @ (Models.User
                         -> Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr
                              GHC.Types.IO
                              AuthApi.ResponseData)
                      @ (Models.User
                         -> Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr
                              GHC.Types.IO
                              AuthApi.ResponseToken)
                      (\ (a1 :: Models.User) ->
                       (Service.createUser a1)
                         `cast`
                       (Trans
                            (Service.N:App[0] <AuthApi.ResponseData>_N)
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                 <Control.Monad.Trans.Except.ExceptT
                                    Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                 <AuthApi.ResponseData>_N))
                         cp)
                      (\ (a1 :: Models.User) ->
                       (Service.getToken a1)
                         `cast`
                       (Trans
                            (Service.N:App[0] <AuthApi.ResponseToken>_N)
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                 <Control.Monad.Trans.Except.ExceptT
                                    Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                 <AuthApi.ResponseToken>_N))
                         cp))
                     `cast`
                   (Trans
                        (Trans
                             (<Models.User>_R
                              ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                 <Network.HTTP.Types.Method.StdMethod>_N
                                                 <'[Servant.API.ContentTypes.JSON]>_N
                                                 <AuthApi.ResponseData>_N
                                                 <'Network.HTTP.Types.Method.POST>_N
                                                 <200>_N
                                                 <Control.Monad.Trans.Except.ExceptT
                                                    Servant.Server.Internal.ServantErr.ServantErr
                                                    GHC.Types.IO>_N)))
                             (Trans
                                  (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m5[0]
                                                 <*>_N
                                                 <'[Servant.API.ContentTypes.JSON]>_N
                                                 <Models.User>_N
                                                 <Servant.API.Verbs.Verb
                                                    'Network.HTTP.Types.Method.POST
                                                    200
                                                    '[Servant.API.ContentTypes.JSON]
                                                    AuthApi.ResponseData>_N
                                                 <Control.Monad.Trans.Except.ExceptT
                                                    Servant.Server.Internal.ServantErr.ServantErr
                                                    GHC.Types.IO>_N)))
                                  (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                 <*>_N
                                                 <"users">_N
                                                 <Servant.API.ReqBody.ReqBody
                                                    '[Servant.API.ContentTypes.JSON] Models.User
                                                  Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                       '[Servant.API.ContentTypes.JSON]
                                                                       AuthApi.ResponseData>_N
                                                 <Control.Monad.Trans.Except.ExceptT
                                                    Servant.Server.Internal.ServantErr.ServantErr
                                                    GHC.Types.IO>_N))))
                         Servant.API.Alternative.:<|> Trans
                                                          (<Models.User>_R
                                                           ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                              <Network.HTTP.Types.Method.StdMethod>_N
                                                                              <'[Servant.API.ContentTypes.JSON]>_N
                                                                              <AuthApi.ResponseToken>_N
                                                                              <'Network.HTTP.Types.Method.POST>_N
                                                                              <200>_N
                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                                                 GHC.Types.IO>_N)))
                                                          (Trans
                                                               (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m5[0]
                                                                              <*>_N
                                                                              <'[Servant.API.ContentTypes.JSON]>_N
                                                                              <Models.User>_N
                                                                              <Servant.API.Verbs.Verb
                                                                                 'Network.HTTP.Types.Method.POST
                                                                                 200
                                                                                 '[Servant.API.ContentTypes.JSON]
                                                                                 AuthApi.ResponseToken>_N
                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                                                 GHC.Types.IO>_N)))
                                                               (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                              <*>_N
                                                                              <"verify">_N
                                                                              <Servant.API.ReqBody.ReqBody
                                                                                 '[Servant.API.ContentTypes.JSON]
                                                                                 Models.User
                                                                               Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                    '[Servant.API.ContentTypes.JSON]
                                                                                                    AuthApi.ResponseToken>_N
                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                                                 GHC.Types.IO>_N)))))_R
                        (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                       <"users"
                                        Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                              '[Servant.API.ContentTypes.JSON]
                                                              Models.User
                                                            Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                 '[Servant.API.ContentTypes.JSON]
                                                                                 AuthApi.ResponseData)>_N
                                       <"verify"
                                        Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                              '[Servant.API.ContentTypes.JSON]
                                                              Models.User
                                                            Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                 '[Servant.API.ContentTypes.JSON]
                                                                                 AuthApi.ResponseToken)>_N
                                       <Control.Monad.Trans.Except.ExceptT
                                          Servant.Server.Internal.ServantErr.ServantErr
                                          GHC.Types.IO>_N))))) -}
e32fe0bea9069ebafdffb66b589e79ea
  appApi :: Data.Proxy.Proxy AuthApi.AuthServiceApi
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (Data.Proxy.Proxy @ * @ AuthApi.AuthServiceApi) -}
6fd668390e69e24127274cae0ffa4471
  appToServer ::
    Database.Persist.Sql.Types.ConnectionPool
    -> Servant.Server.Internal.Server AuthApi.AuthServiceApi
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (0, True, True)
                Service.appToServer1
                  `cast`
                (<Database.Persist.Sql.Types.ConnectionPool>_R
                 ->_R Trans
                          (Trans
                               (<Models.User>_R
                                ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                   <Network.HTTP.Types.Method.StdMethod>_N
                                                   <'[Servant.API.ContentTypes.JSON]>_N
                                                   <AuthApi.ResponseData>_N
                                                   <'Network.HTTP.Types.Method.POST>_N
                                                   <200>_N
                                                   <Control.Monad.Trans.Except.ExceptT
                                                      Servant.Server.Internal.ServantErr.ServantErr
                                                      GHC.Types.IO>_N)))
                               (Trans
                                    (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m5[0]
                                                   <*>_N
                                                   <'[Servant.API.ContentTypes.JSON]>_N
                                                   <Models.User>_N
                                                   <Servant.API.Verbs.Verb
                                                      'Network.HTTP.Types.Method.POST
                                                      200
                                                      '[Servant.API.ContentTypes.JSON]
                                                      AuthApi.ResponseData>_N
                                                   <Control.Monad.Trans.Except.ExceptT
                                                      Servant.Server.Internal.ServantErr.ServantErr
                                                      GHC.Types.IO>_N)))
                                    (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                   <*>_N
                                                   <"users">_N
                                                   <Servant.API.ReqBody.ReqBody
                                                      '[Servant.API.ContentTypes.JSON] Models.User
                                                    Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                         '[Servant.API.ContentTypes.JSON]
                                                                         AuthApi.ResponseData>_N
                                                   <Control.Monad.Trans.Except.ExceptT
                                                      Servant.Server.Internal.ServantErr.ServantErr
                                                      GHC.Types.IO>_N))))
                           Servant.API.Alternative.:<|> Trans
                                                            (<Models.User>_R
                                                             ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                                <Network.HTTP.Types.Method.StdMethod>_N
                                                                                <'[Servant.API.ContentTypes.JSON]>_N
                                                                                <AuthApi.ResponseToken>_N
                                                                                <'Network.HTTP.Types.Method.POST>_N
                                                                                <200>_N
                                                                                <Control.Monad.Trans.Except.ExceptT
                                                                                   Servant.Server.Internal.ServantErr.ServantErr
                                                                                   GHC.Types.IO>_N)))
                                                            (Trans
                                                                 (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m5[0]
                                                                                <*>_N
                                                                                <'[Servant.API.ContentTypes.JSON]>_N
                                                                                <Models.User>_N
                                                                                <Servant.API.Verbs.Verb
                                                                                   'Network.HTTP.Types.Method.POST
                                                                                   200
                                                                                   '[Servant.API.ContentTypes.JSON]
                                                                                   AuthApi.ResponseToken>_N
                                                                                <Control.Monad.Trans.Except.ExceptT
                                                                                   Servant.Server.Internal.ServantErr.ServantErr
                                                                                   GHC.Types.IO>_N)))
                                                                 (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                                <*>_N
                                                                                <"verify">_N
                                                                                <Servant.API.ReqBody.ReqBody
                                                                                   '[Servant.API.ContentTypes.JSON]
                                                                                   Models.User
                                                                                 Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                      '[Servant.API.ContentTypes.JSON]
                                                                                                      AuthApi.ResponseToken>_N
                                                                                <Control.Monad.Trans.Except.ExceptT
                                                                                   Servant.Server.Internal.ServantErr.ServantErr
                                                                                   GHC.Types.IO>_N)))))_R
                          (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                         <"users"
                                          Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                '[Servant.API.ContentTypes.JSON]
                                                                Models.User
                                                              Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                   '[Servant.API.ContentTypes.JSON]
                                                                                   AuthApi.ResponseData)>_N
                                         <"verify"
                                          Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                '[Servant.API.ContentTypes.JSON]
                                                                Models.User
                                                              Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                   '[Servant.API.ContentTypes.JSON]
                                                                                   AuthApi.ResponseToken)>_N
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_N)))) -}
ae1367bda503fdd973899cdd525c5676
  appToServer1 ::
    Database.Persist.Sql.Types.ConnectionPool
    -> (Models.User
        -> Control.Monad.Trans.Except.ExceptT
             Servant.Server.Internal.ServantErr.ServantErr
             GHC.Types.IO
             AuthApi.ResponseData)
       Servant.API.Alternative.:<|> (Models.User
                                     -> Control.Monad.Trans.Except.ExceptT
                                          Servant.Server.Internal.ServantErr.ServantErr
                                          GHC.Types.IO
                                          AuthApi.ResponseToken)
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (cp :: Database.Persist.Sql.Types.ConnectionPool) ->
                 Servant.API.Alternative.:<|>
                   @ (Models.User
                      -> Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr
                           GHC.Types.IO
                           AuthApi.ResponseData)
                   @ (Models.User
                      -> Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr
                           GHC.Types.IO
                           AuthApi.ResponseToken)
                   (\ (a1 :: Models.User) ->
                    (Service.createUser a1)
                      `cast`
                    (Trans
                         (Service.N:App[0] <AuthApi.ResponseData>_N)
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N
                              <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                              <Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                              <AuthApi.ResponseData>_N))
                      cp)
                   (\ (a1 :: Models.User) ->
                    (Service.getToken a1)
                      `cast`
                    (Trans
                         (Service.N:App[0] <AuthApi.ResponseToken>_N)
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N
                              <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                              <Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                              <AuthApi.ResponseToken>_N))
                      cp)) -}
3e6a0d71e8fecb991a4d142cafae87af
  authService ::
    Servant.Server.Internal.ServerT AuthApi.AuthServiceApi Service.App
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Service.authService1
                  `cast`
                (Trans
                     (Trans
                          (<Models.User>_R
                           ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                              <Network.HTTP.Types.Method.StdMethod>_N
                                              <'[Servant.API.ContentTypes.JSON]>_N
                                              <AuthApi.ResponseData>_N
                                              <'Network.HTTP.Types.Method.POST>_N
                                              <200>_N
                                              <Service.App>_N)))
                          (Trans
                               (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m5[0]
                                              <*>_N
                                              <'[Servant.API.ContentTypes.JSON]>_N
                                              <Models.User>_N
                                              <Servant.API.Verbs.Verb
                                                 'Network.HTTP.Types.Method.POST
                                                 200
                                                 '[Servant.API.ContentTypes.JSON]
                                                 AuthApi.ResponseData>_N
                                              <Service.App>_N)))
                               (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                              <*>_N
                                              <"users">_N
                                              <Servant.API.ReqBody.ReqBody
                                                 '[Servant.API.ContentTypes.JSON] Models.User
                                               Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                    '[Servant.API.ContentTypes.JSON]
                                                                    AuthApi.ResponseData>_N
                                              <Service.App>_N))))
                      Servant.API.Alternative.:<|> Trans
                                                       (<Models.User>_R
                                                        ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                           <Network.HTTP.Types.Method.StdMethod>_N
                                                                           <'[Servant.API.ContentTypes.JSON]>_N
                                                                           <AuthApi.ResponseToken>_N
                                                                           <'Network.HTTP.Types.Method.POST>_N
                                                                           <200>_N
                                                                           <Service.App>_N)))
                                                       (Trans
                                                            (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m5[0]
                                                                           <*>_N
                                                                           <'[Servant.API.ContentTypes.JSON]>_N
                                                                           <Models.User>_N
                                                                           <Servant.API.Verbs.Verb
                                                                              'Network.HTTP.Types.Method.POST
                                                                              200
                                                                              '[Servant.API.ContentTypes.JSON]
                                                                              AuthApi.ResponseToken>_N
                                                                           <Service.App>_N)))
                                                            (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                           <*>_N
                                                                           <"verify">_N
                                                                           <Servant.API.ReqBody.ReqBody
                                                                              '[Servant.API.ContentTypes.JSON]
                                                                              Models.User
                                                                            Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                 '[Servant.API.ContentTypes.JSON]
                                                                                                 AuthApi.ResponseToken>_N
                                                                           <Service.App>_N)))))_R
                     (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                    <"users"
                                     Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                           '[Servant.API.ContentTypes.JSON]
                                                           Models.User
                                                         Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                              '[Servant.API.ContentTypes.JSON]
                                                                              AuthApi.ResponseData)>_N
                                    <"verify"
                                     Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                           '[Servant.API.ContentTypes.JSON]
                                                           Models.User
                                                         Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                              '[Servant.API.ContentTypes.JSON]
                                                                              AuthApi.ResponseToken)>_N
                                    <Service.App>_N)))) -}
90e146efa5b5e17eaf0d6ec1adeebd41
  authService1 ::
    (Models.User -> Service.App AuthApi.ResponseData)
    Servant.API.Alternative.:<|> (Models.User
                                  -> Service.App AuthApi.ResponseToken)
  {- Strictness: m,
     Unfolding: (Servant.API.Alternative.:<|>
                   @ (Models.User -> Service.App AuthApi.ResponseData)
                   @ (Models.User -> Service.App AuthApi.ResponseToken)
                   Service.createUser
                   Service.getToken) -}
f651cc670e10c712ab1e2c2bef3e2484
  convertApp ::
    Database.Persist.Sql.Types.ConnectionPool
    -> Service.App
       Servant.Utils.Enter.:~> Control.Monad.Trans.Except.ExceptT
                                 Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)>,
     Unfolding: InlineRule (0, True, True)
                Service.convertApp1
                  `cast`
                (<Database.Persist.Sql.Types.ConnectionPool>_R
                 ->_R Sym (Servant.Utils.Enter.N::~>[0]
                               <Service.App>_R
                               <Control.Monad.Trans.Except.ExceptT
                                  Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R)) -}
3b08feff647c9c9d648f1e6d5b845b54
  convertApp1 ::
    Database.Persist.Sql.Types.ConnectionPool
    -> forall a.
       Service.App a
       -> Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (cp :: Database.Persist.Sql.Types.ConnectionPool)
                   @ a
                   (eta :: Service.App a) ->
                 eta
                   `cast`
                 (Trans
                      (Service.N:App[0] <a>_N)
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                           <Control.Monad.Trans.Except.ExceptT
                              Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                           <a>_N))
                   cp) -}
471380c05afbb6d5e41cc3a08d89e146
  createUser :: Models.User -> Service.App AuthApi.ResponseData
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (user :: Models.User) ->
                 let {
                   email :: GHC.Base.String
                   = case user of wild { Models.User ds1 ds2 -> ds1 }
                 } in
                 let {
                   eta :: Data.ByteString.Internal.ByteString
                   = case user of wild { Models.User ds1 ds2 ->
                     case GHC.List.$wlenAcc @ GHC.Types.Char ds2 0# of ww2 { DEFAULT ->
                     Data.ByteString.Internal.$wunsafePackLenChars ww2 ds2 } }
                 } in
                 (\ (r1 :: Data.Pool.Pool
                             Database.Persist.Sql.Types.Internal.SqlBackend)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case Crypto.PasswordStore.makePassword1
                         eta
                         Service.createUser4
                         s of ds { (#,#) ipv ipv1 ->
                  case ((Models.dbAction
                           @ Service.App
                           @ (Data.Either.Either
                                (Database.Persist.Class.PersistEntity.Entity Models.User)
                                (Database.Persist.Class.PersistEntity.Key Models.User))
                           Service.$fMonadReaderApp
                           Service.$fMonadIOApp
                           (Database.Persist.Class.PersistUnique.insertBy
                              @ GHC.Types.IO
                              @ Database.Persist.Sql.Types.Internal.SqlBackend
                              @ Models.User
                              Control.Monad.IO.Class.$fMonadIOIO
                              Database.Persist.Sql.Orphan.PersistUnique.$fPersistUniqueWriteSqlBackend
                              Service.getToken6
                                `cast`
                              (GHC.Classes.(%,%)
                                 <Database.Persist.Class.PersistEntity.PersistEntity Models.User>_N
                                 ((Data.Type.Equality.~)
                                    <*>_N
                                    (Sym (Models.D:R:PersistEntityBackendUser[0]))
                                    (Sym (Database.Persist.Sql.Types.Internal.D:R:BaseBackendSqlBackend[0])))_N)_R
                              (case email of dt { DEFAULT ->
                               case ipv1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                               case Data.ByteString.Internal.$wunpackAppendCharsLazy
                                      ww1
                                      ww2
                                      ww3
                                      ww4
                                      (GHC.Types.[] @ GHC.Types.Char) of dt1 { DEFAULT ->
                               Models.User dt dt1 } } })))
                          `cast`
                        (Trans
                             (Service.N:App[0] <Data.Either.Either
                                                  (Database.Persist.Class.PersistEntity.Entity
                                                     Models.User)
                                                  (Database.Persist.Class.PersistEntity.Key
                                                     Models.User)>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                  <Control.Monad.Trans.Except.ExceptT
                                     Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                  <Data.Either.Either
                                     (Database.Persist.Class.PersistEntity.Entity Models.User)
                                     (Database.Persist.Class.PersistEntity.Key Models.User)>_N))
                          r1)
                         `cast`
                       (Trans
                            (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <Servant.Server.Internal.ServantErr.ServantErr>_N
                                 <GHC.Types.IO>_R
                                 <Data.Either.Either
                                    (Database.Persist.Class.PersistEntity.Entity Models.User)
                                    (Database.Persist.Class.PersistEntity.Key Models.User)>_N)
                            (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Servant.Server.Internal.ServantErr.ServantErr
                                    (Data.Either.Either
                                       (Database.Persist.Class.PersistEntity.Entity Models.User)
                                       (Database.Persist.Class.PersistEntity.Key Models.User))>_R))
                         ipv of ds1 { (#,#) ipv2 ipv3 ->
                  case ipv3 of wild {
                    Data.Either.Left e1
                    -> (# ipv2,
                          Data.Either.Left
                            @ Servant.Server.Internal.ServantErr.ServantErr
                            @ AuthApi.ResponseData
                            e1 #)
                    Data.Either.Right x
                    -> case x of wild1 {
                         Data.Either.Left ds2 -> (# ipv2, Service.createUser1 #)
                         Data.Either.Right user1
                         -> (# ipv2,
                               Data.Either.Right
                                 @ Servant.Server.Internal.ServantErr.ServantErr
                                 @ AuthApi.ResponseData
                                 (AuthApi.ResponseData
                                    (case user1
                                            `cast`
                                          (Trans
                                               (Models.D:R:KeyUser0[0])
                                               (Trans
                                                    (Models.N:R:KeyUser[0])
                                                    (Trans
                                                         (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0])
                                                         (Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0])))) of wild2 { GHC.Int.I64# x# ->
                                     case GHC.Show.$wshowSignedInt
                                            0#
                                            x#
                                            (GHC.Types.[]
                                               @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                     GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) #) } } } })
                   `cast`
                 (Trans
                      (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                       ->_R Trans
                                (Sym (GHC.Types.N:IO[0]
                                          <Data.Either.Either
                                             Servant.Server.Internal.ServantErr.ServantErr
                                             AuthApi.ResponseData>_R))
                                (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                          <Servant.Server.Internal.ServantErr.ServantErr>_N
                                          <GHC.Types.IO>_R
                                          <AuthApi.ResponseData>_N)))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <Data.Pool.Pool
                                        Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                     <Control.Monad.Trans.Except.ExceptT
                                        Servant.Server.Internal.ServantErr.ServantErr
                                        GHC.Types.IO>_R
                                     <AuthApi.ResponseData>_N))
                           (Sym (Service.N:App[0]) <AuthApi.ResponseData>_N)))) -}
0f191b5f78666e7effdce346e1eb11d7
  createUser1 ::
    Data.Either.Either
      Servant.Server.Internal.ServantErr.ServantErr AuthApi.ResponseData
  {- Unfolding: (Data.Either.Left
                   @ Servant.Server.Internal.ServantErr.ServantErr
                   @ AuthApi.ResponseData
                   Service.createUser_eta) -}
54b51bad0e24010ea052230614b21377
  createUser2 :: Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Lazy.Internal.$wpackChunks1
                   32#
                   Service.createUser3) -}
fd0d820b2a1cb16c134cf07a11330de5
  createUser3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "User exists"#) -}
10a2e90294c68402e8e2b6a0b13b2a83
  createUser4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 20#) -}
4a497a03e5405304d482f866b387684d
  createUser_eta :: Servant.Server.Internal.ServantErr.ServantErr
  {- Strictness: m,
     Unfolding: (Servant.Server.Internal.ServantErr.ServantErr
                   Servant.Server.Internal.ServantErr.err51
                   Servant.Server.Internal.ServantErr.err50
                   Service.createUser2
                   (GHC.Types.[] @ Network.HTTP.Types.Header.Header)) -}
0d7ab1c64e4203272c3cc4326218e1e4
  getToken :: Models.User -> Service.App AuthApi.ResponseToken
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (user :: Models.User) ->
                 let {
                   email :: GHC.Base.String
                   = case user of wild { Models.User ds1 ds2 -> ds1 }
                 } in
                 let {
                   lvl15 :: Service.App
                              (GHC.Base.Maybe
                                 (Database.Persist.Class.PersistEntity.Entity Models.User))
                   = Models.dbAction
                       @ Service.App
                       @ (GHC.Base.Maybe
                            (Database.Persist.Class.PersistEntity.Entity Models.User))
                       Service.$fMonadReaderApp
                       Service.$fMonadIOApp
                       (Database.Persist.Sql.Orphan.PersistQuery.$fPersistQueryReadSqlBackend_$cselectFirst
                          @ GHC.Types.IO
                          @ Models.User
                          Control.Monad.IO.Class.$fMonadIOIO
                          Service.getToken6
                            `cast`
                          (GHC.Classes.(%,%)
                             <Database.Persist.Class.PersistEntity.PersistEntity Models.User>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                (Sym (Models.D:R:PersistEntityBackendUser[0]))
                                (Sym (Database.Persist.Sql.Types.Internal.D:R:BaseBackendSqlBackend[0])))_N)_R
                          (GHC.Types.:
                             @ (Database.Persist.Class.PersistEntity.Filter Models.User)
                             (Database.Persist.Class.PersistEntity.Filter
                                @ Models.User
                                @ GHC.Base.String
                                Database.Persist.Class.PersistField.$fPersistField[]0
                                Service.getToken5
                                  `cast`
                                (Sym (Models.D:R:EntityFieldUsertyp0[0]) <GHC.Base.String>_N)
                                (Data.Either.Left @ GHC.Base.String @ [GHC.Base.String] email)
                                Database.Persist.Types.Base.Eq)
                             (GHC.Types.[]
                                @ (Database.Persist.Class.PersistEntity.Filter Models.User)))
                          (GHC.Types.[]
                             @ (Database.Persist.Class.PersistEntity.SelectOpt Models.User)))
                 } in
                 let {
                   password :: GHC.Base.String
                   = case user of wild { Models.User ds1 ds2 -> ds2 }
                 } in
                 (\ (r1 :: Data.Pool.Pool
                             Database.Persist.Sql.Types.Internal.SqlBackend)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case Data.Time.Clock.CTimeval.getCTimeval1
                         s of ds { (#,#) ipv ipv1 ->
                  case (lvl15
                          `cast`
                        (Trans
                             (Service.N:App[0] <GHC.Base.Maybe
                                                  (Database.Persist.Class.PersistEntity.Entity
                                                     Models.User)>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                  <Control.Monad.Trans.Except.ExceptT
                                     Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO>_R
                                  <GHC.Base.Maybe
                                     (Database.Persist.Class.PersistEntity.Entity Models.User)>_N))
                          r1)
                         `cast`
                       (Trans
                            (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <Servant.Server.Internal.ServantErr.ServantErr>_N
                                 <GHC.Types.IO>_R
                                 <GHC.Base.Maybe
                                    (Database.Persist.Class.PersistEntity.Entity Models.User)>_N)
                            (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Servant.Server.Internal.ServantErr.ServantErr
                                    (GHC.Base.Maybe
                                       (Database.Persist.Class.PersistEntity.Entity
                                          Models.User))>_R))
                         ipv of ds1 { (#,#) ipv2 ipv3 ->
                  case ipv3 of wild {
                    Data.Either.Left e1
                    -> (# ipv2,
                          Data.Either.Left
                            @ Servant.Server.Internal.ServantErr.ServantErr
                            @ AuthApi.ResponseToken
                            e1 #)
                    Data.Either.Right x
                    -> case x of wild1 {
                         GHC.Base.Nothing -> (# ipv2, Service.getToken4 #)
                         GHC.Base.Just user1
                         -> case user1 of ww { Database.Persist.Class.PersistEntity.Entity ww1 ww2 ww3 ->
                            case ww3 of ww4 { Models.User ww5 ww6 ->
                            case Service.$wverify ww6 password of wild2 {
                              GHC.Types.False -> (# ipv2, Service.getToken3 #)
                              GHC.Types.True
                              -> (# ipv2,
                                    Data.Either.Right
                                      @ Servant.Server.Internal.ServantErr.ServantErr
                                      @ AuthApi.ResponseToken
                                      (AuthApi.ResponseToken
                                         (Data.ByteString.Lazy.Internal.unpackChars
                                            (Data.ByteString.Builder.toLazyByteString
                                               (case AuthApi.$w$ctoJSON
                                                       email
                                                       (Data.Time.Format.formatTime
                                                          @ Data.Time.Clock.UTC.UTCTime
                                                          Data.Time.Format.$fFormatTimeUTCTime_$cformatCharacter
                                                            `cast`
                                                          (Sym (Data.Time.Format.N:FormatTime[0]
                                                                    <Data.Time.Clock.UTC.UTCTime>_N))
                                                          Data.Time.Format.Locale.defaultTimeLocale
                                                          Service.getToken2
                                                          (case Data.Time.Clock.POSIX.$wposixSecondsToUTCTime
                                                                  (case Data.Time.Clock.POSIX.$wposixSecondsToUTCTime
                                                                          (Data.Time.Clock.POSIX.getCurrentTime2
                                                                             ipv1) of ww7 { (#,#) ww8 ww9 ->
                                                                   (GHC.Integer.Type.plusInteger
                                                                      Service.getToken1
                                                                      (Data.Time.Clock.POSIX.$wutcTimeToPOSIXSeconds
                                                                         ww8
                                                                         ww9)
                                                                        `cast`
                                                                      (Trans
                                                                           (Data.Time.Clock.UTC.N:NominalDiffTime[0])
                                                                           (Data.Fixed.N:Fixed[0]
                                                                                <Data.Fixed.E12>_P)))
                                                                     `cast`
                                                                   (Trans
                                                                        (Sym (Data.Fixed.N:Fixed[0]
                                                                                  <Data.Fixed.E12>_P))
                                                                        (Sym (Data.Time.Clock.UTC.N:NominalDiffTime[0]))) }) of ww7 { (#,#) ww8 ww9 ->
                                                           Data.Time.Clock.UTC.UTCTime
                                                             ww8
                                                             ww9 })) of ww7 { Unit# ww8 ->
                                                Data.Aeson.Encode.Builder.encodeToBuilder
                                                  (Data.Aeson.Types.Internal.Object
                                                     ww8) })))) #) } } } } } } })
                   `cast`
                 (Trans
                      (<Data.Pool.Pool Database.Persist.Sql.Types.Internal.SqlBackend>_R
                       ->_R Trans
                                (Sym (GHC.Types.N:IO[0]
                                          <Data.Either.Either
                                             Servant.Server.Internal.ServantErr.ServantErr
                                             AuthApi.ResponseToken>_R))
                                (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                          <Servant.Server.Internal.ServantErr.ServantErr>_N
                                          <GHC.Types.IO>_R
                                          <AuthApi.ResponseToken>_N)))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <Data.Pool.Pool
                                        Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                     <Control.Monad.Trans.Except.ExceptT
                                        Servant.Server.Internal.ServantErr.ServantErr
                                        GHC.Types.IO>_R
                                     <AuthApi.ResponseToken>_N))
                           (Sym (Service.N:App[0]) <AuthApi.ResponseToken>_N)))) -}
be4b94c7d2b348ef558bfe7bb59bdd3e
  getToken1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3600000000000000) -}
0fd240dd5fa47aec8695b408c2072cfd
  getToken2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "%FT%T%q%z"#) -}
1a347634f37972c406fd4ea6855853c9
  getToken3 ::
    Data.Either.Either
      Servant.Server.Internal.ServantErr.ServantErr AuthApi.ResponseToken
  {- Unfolding: (Data.Either.Left
                   @ Servant.Server.Internal.ServantErr.ServantErr
                   @ AuthApi.ResponseToken
                   Servant.Server.Internal.ServantErr.err401) -}
9c46d767e730e835f45dd892a28ba3da
  getToken4 ::
    Data.Either.Either
      Servant.Server.Internal.ServantErr.ServantErr AuthApi.ResponseToken
  {- Unfolding: (Data.Either.Left
                   @ Servant.Server.Internal.ServantErr.ServantErr
                   @ AuthApi.ResponseToken
                   Servant.Server.Internal.ServantErr.err500) -}
42040c4c12cc32d661b1a4b06086e025
  getToken5 :: Models.R:EntityFieldUsertyp GHC.Base.String
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Models.UserEmail
                   @ GHC.Base.String
                   Service.$s$WUserEmail2
                     `cast`
                   (Sym (Data.Type.Equality.N:~[0]
                             <*>_N) <[GHC.Types.Char]>_N <[GHC.Types.Char]>_N)) -}
31eae893295a8804889342964b977ddb
  getToken6 ::
    (Database.Persist.Class.PersistEntity.PersistEntity Models.User,
     Database.Persist.Sql.Types.Internal.SqlBackend
     Data.Type.Equality.~ Database.Persist.Sql.Types.Internal.SqlBackend)
  {- Strictness: m,
     Unfolding: ((Models.$fPersistEntityUser,
                  Service.getToken7
                    `cast`
                  (Sym (Data.Type.Equality.N:~[0]
                            <*>_N) <Database.Persist.Sql.Types.Internal.SqlBackend>_N <Database.Persist.Sql.Types.Internal.SqlBackend>_N))) -}
af38072c0df027d5ba3c6f1f0352a554
  getToken7 ::
    Database.Persist.Sql.Types.Internal.SqlBackend
    GHC.Types.~~ Database.Persist.Sql.Types.Internal.SqlBackend
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ Database.Persist.Sql.Types.Internal.SqlBackend
                   @ Database.Persist.Sql.Types.Internal.SqlBackend
                   @~ <Database.Persist.Sql.Types.Internal.SqlBackend>_N) -}
f9b8d5ee564bba790a83f1062990de16
  iso8601 :: Data.Time.Clock.UTC.UTCTime -> GHC.Base.String
  {- Arity: 1,
     Unfolding: (Data.Time.Format.formatTime
                   @ Data.Time.Clock.UTC.UTCTime
                   Data.Time.Format.$fFormatTimeUTCTime_$cformatCharacter
                     `cast`
                   (Sym (Data.Time.Format.N:FormatTime[0]
                             <Data.Time.Clock.UTC.UTCTime>_N))
                   Data.Time.Format.Locale.defaultTimeLocale
                   Service.getToken2) -}
56e0e86b1a61c7e80dff770cd8f8bd4f
  runApp ::
    Service.App a
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.ConnectionPool
         (Control.Monad.Trans.Except.ExceptT
            Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO)
         a
  RecSel Left Service.App
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Service.runApp1
                  `cast`
                (forall (a :: <*>_N).
                 <Service.App a>_R ->_R Service.N:App[0] <a>_N) -}
5fc050ad6cd7a37efb33b79bea0995d9
  runApp1 :: Service.App a -> Service.App a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Service.App a) -> ds) -}
2580eca3576d95c36ae6755f489ea2a7
  secretKey :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "012-456-89A-CDE-012-456-89A-CDE-"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
e5de5a92c37248be8cd04b22110f70fb
  verify ::
    Database.Persist.Class.PersistEntity.Entity Models.User
    -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(LLS(LS)),1*U(A,A,1*U(A,U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Database.Persist.Class.PersistEntity.Entity Models.User)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Database.Persist.Class.PersistEntity.Entity ww1 ww2 ww3 ->
                 case ww3 of ww4 { Models.User ww5 ww6 ->
                 Service.$wverify ww6 w1 } }) -}
instance GHC.Base.Applicative [Service.App]
  = Service.$fApplicativeApp
instance GHC.Base.Functor [Service.App] = Service.$fFunctorApp
instance GHC.Base.Monad [Service.App] = Service.$fMonadApp
instance Control.Monad.Error.Class.MonadError [Servant.Server.Internal.ServantErr.ServantErr,
                                               Service.App]
  = Service.$fMonadErrorApp
instance Control.Monad.IO.Class.MonadIO [Service.App]
  = Service.$fMonadIOApp
instance Control.Monad.Reader.Class.MonadReader [Data.Pool.Pool,
                                                 Service.App]
  = Service.$fMonadReaderApp
"SPEC/Service $fAllCTRender:a @ JSON @ '[] @ ResponseData" [ALWAYS] forall ($dAccept :: Servant.API.ContentTypes.Accept
                                                                                          Servant.API.ContentTypes.JSON)
                                                                           ($dAllMime :: Servant.API.ContentTypes.AllMime
                                                                                           '[])
                                                                           ($dAllMimeRender :: Servant.API.ContentTypes.AllMimeRender
                                                                                                 '[Servant.API.ContentTypes.JSON]
                                                                                                 AuthApi.ResponseData)
  Servant.API.ContentTypes.$fAllCTRender:a @ Servant.API.ContentTypes.JSON
                                           @ '[]
                                           @ AuthApi.ResponseData
                                           $dAccept
                                           $dAllMime
                                           $dAllMimeRender
  = Service.$s$fAllCTRender:a4
"SPEC/Service $fAllCTRender:a @ JSON @ '[] @ ResponseToken" [ALWAYS] forall ($dAccept :: Servant.API.ContentTypes.Accept
                                                                                           Servant.API.ContentTypes.JSON)
                                                                            ($dAllMime :: Servant.API.ContentTypes.AllMime
                                                                                            '[])
                                                                            ($dAllMimeRender :: Servant.API.ContentTypes.AllMimeRender
                                                                                                  '[Servant.API.ContentTypes.JSON]
                                                                                                  AuthApi.ResponseToken)
  Servant.API.ContentTypes.$fAllCTRender:a @ Servant.API.ContentTypes.JSON
                                           @ '[]
                                           @ AuthApi.ResponseToken
                                           $dAccept
                                           $dAllMime
                                           $dAllMimeRender
  = Service.$s$fAllCTRender:a
"SPEC/Service $fAllMimeRender:a0 @ JSON @ ResponseData" [ALWAYS] forall ($dMimeRender :: Servant.API.ContentTypes.MimeRender
                                                                                           Servant.API.ContentTypes.JSON
                                                                                           AuthApi.ResponseData)
  Servant.API.ContentTypes.$fAllMimeRender:a0 @ Servant.API.ContentTypes.JSON
                                              @ AuthApi.ResponseData
                                              $dMimeRender
  = Service.$s$fAllCTRender:a_$s$fAllMimeRender:a1
"SPEC/Service $fAllMimeRender:a0 @ JSON @ ResponseToken" [ALWAYS] forall ($dMimeRender :: Servant.API.ContentTypes.MimeRender
                                                                                            Servant.API.ContentTypes.JSON
                                                                                            AuthApi.ResponseToken)
  Servant.API.ContentTypes.$fAllMimeRender:a0 @ Servant.API.ContentTypes.JSON
                                              @ AuthApi.ResponseToken
                                              $dMimeRender
  = Service.$s$fAllCTRender:a_$s$fAllMimeRender:a0
"SPEC/Service $fAllMimeUnrender:a @ JSON @ User @ '[]" [ALWAYS] forall ($dMimeUnrender :: Servant.API.ContentTypes.MimeUnrender
                                                                                            Servant.API.ContentTypes.JSON
                                                                                            Models.User)
                                                                       ($dAllMimeUnrender :: Servant.API.ContentTypes.AllMimeUnrender
                                                                                               '[]
                                                                                               Models.User)
  Servant.API.ContentTypes.$fAllMimeUnrender:a @ Servant.API.ContentTypes.JSON
                                               @ Models.User
                                               @ '[]
                                               $dMimeUnrender
                                               $dAllMimeUnrender
  = Service.$s$fAllMimeUnrender:a
"SPEC/Service $fApplicativeReaderT_$c<*> @ (ExceptT ServantErr IO) _" [ALWAYS] forall @ r
                                                                                      ($dApplicative :: GHC.Base.Applicative
                                                                                                          (Control.Monad.Trans.Except.ExceptT
                                                                                                             Servant.Server.Internal.ServantErr.ServantErr
                                                                                                             GHC.Types.IO))
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ (Control.Monad.Trans.Except.ExceptT
                                                             Servant.Server.Internal.ServantErr.ServantErr
                                                             GHC.Types.IO)
                                                        @ r
                                                        $dApplicative
  = Service.$fApplicativeApp_$s$fApplicativeReaderT_$c<*> @ r
"SPEC/Service $fFunctorReaderT_$cfmap @ (ExceptT ServantErr IO) _" [ALWAYS] forall @ r
                                                                                   ($dFunctor :: GHC.Base.Functor
                                                                                                   (Control.Monad.Trans.Except.ExceptT
                                                                                                      Servant.Server.Internal.ServantErr.ServantErr
                                                                                                      GHC.Types.IO))
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ (Control.Monad.Trans.Except.ExceptT
                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                          GHC.Types.IO)
                                                     @ r
                                                     $dFunctor
  = Service.$fFunctorApp_$s$fFunctorReaderT_$cfmap @ r
"SPEC/Service $fMimeRenderTYPEJSONa @ ResponseData" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.Class.ToJSON
                                                                                   AuthApi.ResponseData)
  Servant.API.ContentTypes.$fMimeRenderTYPEJSONa @ AuthApi.ResponseData
                                                 $dToJSON
  = Service.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa1
"SPEC/Service $fMimeRenderTYPEJSONa @ ResponseToken" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.Class.ToJSON
                                                                                    AuthApi.ResponseToken)
  Servant.API.ContentTypes.$fMimeRenderTYPEJSONa @ AuthApi.ResponseToken
                                                 $dToJSON
  = Service.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa
"SPEC/Service $fMimeRenderTYPEJSONa_$cmimeRender @ ResponseData" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.Class.ToJSON
                                                                                                AuthApi.ResponseData)
  Servant.API.ContentTypes.$fMimeRenderTYPEJSONa_$cmimeRender @ AuthApi.ResponseData
                                                              $dToJSON
  = Service.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender1
"SPEC/Service $fMimeRenderTYPEJSONa_$cmimeRender @ ResponseToken" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.Class.ToJSON
                                                                                                 AuthApi.ResponseToken)
  Servant.API.ContentTypes.$fMimeRenderTYPEJSONa_$cmimeRender @ AuthApi.ResponseToken
                                                              $dToJSON
  = Service.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender
"SPEC/Service $fMimeUnrenderTYPEJSONa @ User" [ALWAYS] forall ($dFromJSON :: Data.Aeson.Types.Class.FromJSON
                                                                               Models.User)
  Servant.API.ContentTypes.$fMimeUnrenderTYPEJSONa @ Models.User
                                                   $dFromJSON
  = Service.$s$fAllMimeUnrender:a_$s$fMimeUnrenderTYPEJSONa
"SPEC/Service $fMimeUnrenderTYPEJSONa_$cmimeUnrender @ User" [ALWAYS] forall ($dFromJSON :: Data.Aeson.Types.Class.FromJSON
                                                                                              Models.User)
  Servant.API.ContentTypes.$fMimeUnrenderTYPEJSONa_$cmimeUnrender @ Models.User
                                                                  $dFromJSON
  = Service.$s$fAllMimeUnrender:a_$s$fMimeUnrenderTYPEJSONa_$cmimeUnrender
"SPEC/Service $fMonadReaderT_$c>> @ (ExceptT ServantErr IO) _" [ALWAYS] forall @ r
                                                                               ($dMonad :: GHC.Base.Monad
                                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                                Servant.Server.Internal.ServantErr.ServantErr
                                                                                                GHC.Types.IO))
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>> @ (Control.Monad.Trans.Except.ExceptT
                                                      Servant.Server.Internal.ServantErr.ServantErr
                                                      GHC.Types.IO)
                                                 @ r
                                                 $dMonad
  = Service.$fMonadApp_$s$fMonadReaderT_$c>> @ r
"SPEC/Service $fMonadReaderT_$c>>= @ (ExceptT ServantErr IO) _" [ALWAYS] forall @ r
                                                                                ($dMonad :: GHC.Base.Monad
                                                                                              (Control.Monad.Trans.Except.ExceptT
                                                                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                                                                 GHC.Types.IO))
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ (Control.Monad.Trans.Except.ExceptT
                                                       Servant.Server.Internal.ServantErr.ServantErr
                                                       GHC.Types.IO)
                                                  @ r
                                                  $dMonad
  = Service.$fMonadApp_$s$fMonadReaderT_$c>>= @ r
"SPEC/Service $fMonadReaderT_$cfail @ (ExceptT ServantErr IO) _" [ALWAYS] forall @ r
                                                                                 ($dMonad :: GHC.Base.Monad
                                                                                               (Control.Monad.Trans.Except.ExceptT
                                                                                                  Servant.Server.Internal.ServantErr.ServantErr
                                                                                                  GHC.Types.IO))
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ (Control.Monad.Trans.Except.ExceptT
                                                        Servant.Server.Internal.ServantErr.ServantErr
                                                        GHC.Types.IO)
                                                   @ r
                                                   $dMonad
  = Service.$fMonadApp_$s$fMonadReaderT_$cfail @ r
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

